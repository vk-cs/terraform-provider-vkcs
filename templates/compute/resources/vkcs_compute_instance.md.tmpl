---
subcategory: "{{.SubCategory}}"
layout: "vkcs"
page_title: "vkcs: {{.Name}}"
description: |-
  Manages a compute VM instance.
---

# {{.Name}}

{{ .Description }}

## Example Usage
### Basic Instance
{{tffile "examples/compute/instance/basic/main.tf"}}
Use `vkcs_compute_floatingip_associate` to make the instance accessible from Internet.

### Instance with volume, tags and external IP
~> **Attention:** First, you should create the block storage volume and then attach it to the instance. Failing to do so will result in the virtual machine being provisioned with an ephemeral disk instead. Ephemeral disks lack certain capabilities, such as the ability to move or resize them. It's essential to adhere to the correct order of operations to avoid limitations in the management of block storage.
{{tffile "examples/compute/instance/volumes_tags_externalip/main.tf"}}

### Instance with Multiple Networks
~> **Attention:** When an instance connects to a network using an existing port, the instance's security groups are not automatically applied to the port. Instead, the security groups that were initially defined when the port was created will be applied to the port. As a result, the instance's security groups will not take effect in this scenario.
{{tffile "examples/compute/instance/multiple_networks/main.tf"}}

### Instance with default and custom security groups
{{tffile "examples/compute/instance/default_secgroup/main.tf"}}

### Instance with personality
~> **Attention:** To use this feature, you must set the `config_drive` argument to true.
The Personality feature allows you to customize the files and scripts that are injected into an instance during its provisioning. When using the Personality feature, you can provide one or more files or scripts that are associated with an instance. During instance creation, these files are injected into the instance's file system.

This feature is useful for tasks such as bootstrapping instances with custom configurations, deploying specific software or packages, and executing initialization scripts.
{{tffile "examples/compute/instance/personality/main.tf"}}

### Instance with user data and cloud-init
This feature is used to provide initialization scripts or configurations to instances during their launch. User data is typically used to automate the configuration and customization of instances at the time of provisioning.
{{tffile "examples/compute/instance/userdata/main.tf"}}
Also, the user_data option can be set to the contents of a script file using the file() function:
  user_data = file("${path.module}/userdata.sh")

{{ .SchemaMarkdown }}

## Notes
### Instances and network
* When creating a network for the instance and connecting it to the router, please ensure that you specify the dependency of the instance on the `vkcs_networking_router_interface` resource. This is crucial for the proper initialization of the instance in such scenarios.
* An instance cannot be created without a valid network configuration even if you intend to use `vkcs_compute_interface_attach` after the instance has been created. Please note that if the network block is not explicitly specified, it will be automatically created implicitly only if there is a single network configuration in the project. However, if there are multiple network configurations, the process will fail.

### Instances and Security Groups
~> **Attention:** If you specify the ID of the security group instead of name in old argument _security_groups_, terraform will remove and reapply the security group upon each call.

When referencing a security group resource in an instance resource, always use _security_group_id_ argument.
If you want replace old argument _security_groups_ with _security_group_ids_ just find their ID's and change resource in terraform file, your cloud resource will not be changed.

```hcl
resource "vkcs_networking_secgroup" "sg_1" {
  name = "sg_1"
}

resource "vkcs_compute_instance" "foo" {
  name            = "terraform-test"
  security_group_ids = [vkcs_networking_secgroup.sg_1.id]
}
```

### Tags and metadata
**Metadata:** The `metadata` option allows you to attach key-value pairs of metadata to an instance. Metadata provides additional contextual information about the instance. You could include metadata specifying custom settings, application-specific data, or any other parameters needed for the instance's configuration or operation. Also, metadata can be leveraged by external systems or tools to automate actions or perform integrations. For example, external systems can read instance metadata to retrieve specific details or trigger actions based on the metadata values.
```hcl
resource "vkcs_compute_instance" "instance_1" {

  # Other instance configuration...

  metadata = {
    key1 = "value1"
    key2 = "value2"
  }
}
```

**Tags:** The `tags` option allows you to assign one or more labels (tags) to an instance. Tags are a way to categorize and organize instances based on specific attributes. Tags can be used as triggers for automation or policy enforcement. For example, you might have automation scripts or policies that automatically perform specific actions on instances based on their tags.
```hcl
resource "vkcs_compute_instance" "instance_1" {

  # Other instance configuration...

  tags = ["webserver", "production"]
}
```

By using the `metadata` and `tags` options, you can provide additional context, organization, and categorization to instances, making it easier to manage and identify them based on specific attributes or requirements.

### User-data and personality
**User-data:** The `user-data` option is used to provide cloud-init configuration data to an instance, while the "personality" option is used to inject files into an instance during its creation. Cloud-init is a widely used multi-distribution package that handles early initialization of a cloud instance.

**Personality:** The `personality` option allows you to inject files into an instance during its creation. You can provide one or more files that will be available inside the instance's file system. This can be useful for provisioning additional configuration files, scripts, or any other required data.

Both options, `user-data` and `personality` can be used in combination or individually to customize instances. The choice between them depends on your specific needs and whether you want to provide configuration data through cloud-init or inject files directly into the instance's file system.

## Importing instances

Importing instances can be tricky, since the nova api does not offer all information provided at creation time for later retrieval.
Compute returns the network interfaces grouped by network, thus not in creation order. That means that if you have multiple network interfaces you must take care of the order of networks in your configuration, or read the network order in the state file after import and modify your configuration accordingly.

~> **Note:**
A note on ports. If you have created a networking port independent of an instance, then the import code has no way to detect that the port is created idenpendently, and therefore on deletion of imported instances you might have port resources in your project, which you expected to be created by the instance and thus to also be deleted with the instance.

~> **Note:**
A note on block storage volumes, the importer does not read `delete_on_termination` flag, and always assumes true. If you import an instance created with `delete_on_termination` false, you end up with "orphaned" volumes after destruction of instances.

To import instance use following command:
{{codefile "shell" "templates/compute/resources/vkcs_compute_instance/import/basic/import.sh"}}
