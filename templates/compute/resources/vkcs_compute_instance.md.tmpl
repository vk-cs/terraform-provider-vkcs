---
subcategory: "{{.SubCategory}}"
layout: "vkcs"
page_title: "vkcs: {{.Name}}"
description: |-
  Manages a compute VM instance.
---

# {{.Name}}

{{ .Description }}

## Example Usage
### Basic Instance
{{tffile "examples/compute/instance/basic/main.tf"}}

### Instance With Attached Volume
{{tffile "templates/compute/resources/vkcs_compute_instance/attached_volume/main.tf"}}

### Boot From Volume
{{tffile "templates/compute/resources/vkcs_compute_instance/boot_from_new_volume/main.tf"}}

### Boot From an Existing Volume
{{tffile "templates/compute/resources/vkcs_compute_instance/boot_from_existing_volume/main.tf"}}

### Boot Instance, Create Volume, and Attach Volume as a Block Device
{{tffile .ExampleFile}}

### Boot Instance and Attach Existing Volume as a Block Device
{{tffile "templates/compute/resources/vkcs_compute_instance/boot_instance_attach_existing_volume/main.tf"}}

### Instance With Multiple Networks
{{tffile "examples/compute/instance/multiple_networks/main.tf"}}

### Instance With Personality
{{tffile "templates/compute/resources/vkcs_compute_instance/personality/main.tf"}}

### Instance with Multiple Ephemeral Disks
{{tffile "templates/compute/resources/vkcs_compute_instance/multiple_ephemeral/main.tf"}}

### Instance with Boot Disk and Swap Disk
{{tffile "templates/compute/resources/vkcs_compute_instance/boot_and_swap_disks/main.tf"}}

### Instance with User Data (cloud-init)
{{tffile "templates/compute/resources/vkcs_compute_instance/cloud_init/main.tf"}}
`user_data` can come from a variety of sources: inline, read in from the `file` function, or the `template_cloudinit_config` resource.
{{ .SchemaMarkdown }}

## Notes
### Instances and Security Groups

When referencing a security group resource in an instance resource, always use the _name_ of the security group. If you specify the ID of the security group, Terraform will remove and reapply the security group upon each call. This is because the VKCS Compute API returns the names of the associated security groups and not their IDs.

Note the following example:

```hcl
resource "vkcs_networking_secgroup" "sg_1" {
  name = "sg_1"
}

resource "vkcs_compute_instance" "foo" {
  name            = "terraform-test"
  security_groups = ["${vkcs_networking_secgroup.sg_1.name}"]
}
```

### Instances and Ports

Neutron Ports are a great feature and provide a lot of functionality. However, there are some notes to be aware of when mixing Instances and Ports:

* When attaching an Instance to one or more networks using Ports, place the security groups on the Port and not the Instance. If you place the security groups on the Instance, the security groups will not be applied upon creation, but they will be applied upon a refresh.

* Network IP information is not available within an instance for networks that are attached with Ports. This is mostly due to the flexibility Neutron Ports provide when it comes to IP addresses. For example, a Neutron Port can have multiple Fixed IP addresses associated with it. It's not possible to know which single IP address the user would want returned to the Instance's state information. Therefore, in order for a Provisioner to connect to an Instance via it's network Port, customize the `connection` information:

```hcl
resource "vkcs_networking_port" "port_1" {
  name           = "port_1"
  admin_state_up = "true"

  network_id = "0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d"

  security_group_ids = [
    "2f02d20a-8dca-49b7-b26f-b6ce9fddaf4f",
    "ca1e5ed7-dae8-4605-987b-fadaeeb30461",
  ]
}

resource "vkcs_compute_instance" "instance_1" {
  name = "instance_1"

  network {
    port = "${vkcs_networking_port.port_1.id}"
  }

  connection {
    user        = "root"
    host        = "${vkcs_networking_port.port_1.fixed_ip.0.ip_address}"
    private_key = "~/path/to/key"
  }

  provisioner "remote-exec" {
    inline = [
      "echo terraform executed > /tmp/foo",
    ]
  }
}
```

### Instances and Networks

Instances almost always require a network. Here are some notes to be aware of with how Instances and Networks relate:

* In scenarios where you only have one network available, you can create an instance without specifying a `network` block. VKCS will automatically launch the instance on this network.

* If you have access to more than one network, you will need to specify a network with a `network` block. Not specifying a network will result in the following error:

```
* vkcs_compute_instance.instance: Error creating VKCS server:
Expected HTTP response code [201 202] when accessing [POST https://example.com:8774/v2.1/servers], but got 409 instead
{"conflictingRequest": {"message": "Multiple possible networks found, use a Network ID to be more specific.", "code": 409}}
```

* If you intend to use the `vkcs_compute_interface_attach` resource, you still need to make sure one of the above points is satisfied. An instance cannot be created without a valid network configuration even if you intend to use `vkcs_compute_interface_attach` after the instance has been created.

## Importing instances

Importing instances can be tricky, since the nova api does not offer all information provided at creation time for later retrieval. Network interface attachment order, and number and sizes of ephemeral disks are examples of this.

### Importing basic instance
Assume you want to import an instance with one ephemeral root disk, and one network interface.

Your configuration would look like the following:

```hcl
resource "vkcs_compute_instance" "basic_instance" {
  name            = "basic"
  flavor_id       = "<flavor_id>"
  key_pair        = "<keyname>"
  security_groups = ["default"]
  image_id =  "<image_id>"

  network {
    name = "<network_name>"
  }
}

```
Then you execute
{{codefile "shell" "templates/compute/resources/vkcs_compute_instance/import/basic/import.sh"}}

### Importing instance with multiple network interfaces.

Compute returns the network interfaces grouped by network, thus not in creation order.
That means that if you have multiple network interfaces you must take care of the order of networks in your configuration.


As example we want to import an instance with one ephemeral root disk, and 3 network interfaces.

Examples

```hcl
resource "vkcs_compute_instance" "boot-from-volume" {
  name            = "boot-from-volume"
  flavor_id       = "<flavor_id"
  key_pair        = "<keyname>"
  image_id        = <image_id>
  security_groups = ["default"]

  network {
    name = "<network1>"
  }
  network {
    name = "<network2>"
  }
  network {
    name = "<network1>"
    fixed_ip_v4 = "<fixed_ip_v4>"
  }

}
```

In the above configuration the networks are out of order compared to what nova and thus the import code returns, which means the plan will not be empty after import.

So either with care check the plan and modify configuration, or read the network order in the state file after import and modify your configuration accordingly.

 * A note on ports. If you have created a networking port independent of an instance, then the import code has no way to detect that the port is created idenpendently, and therefore on deletion of imported instances you might have port resources in your project, which you expected to be created by the instance and thus to also be deleted with the instance.

### Importing instances with multiple block storage volumes.

We have an instance with two block storage volumes, one bootable and one non-bootable.
Note that we only configure the bootable device as block_device.
The other volumes can be specified as `vkcs_blockstorage_volume`

```hcl
resource "vkcs_compute_instance" "instance_2" {
  name            = "instance_2"
  image_id        = "<image_id>"
  flavor_id       = "<flavor_id>"
  key_pair        = "<keyname>"
  security_groups = ["default"]

  block_device {
    uuid                  = "<image_id>"
    source_type           = "image"
    destination_type      = "volume"
    boot_index            = 0
    delete_on_termination = true
  }

   network {
    name = "<network_name>"
  }
}
resource "vkcs_blockstorage_volume" "volume_1" {
  size = 1
  name = "<vol_name>"
}
resource "vkcs_compute_volume_attach" "va_1" {
  volume_id   = "${vkcs_blockstorage_volume.volume_1.id}"
  instance_id = "${vkcs_compute_instance.instance_2.id}"
}
```
To import the instance outlined in the above configuration do the following:

{{codefile "shell" "templates/compute/resources/vkcs_compute_instance/import/multiple_volumes/import.sh"}}

* A note on block storage volumes, the importer does not read delete_on_termination flag, and always assumes true. If you import an instance created with delete_on_termination false, you end up with "orphaned" volumes after destruction of instances.
