// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_anycastip

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/vk-cs/terraform-provider-vkcs/vkcs/internal/services/networking/v2/anycastips"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AnycastipResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"associations": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Required:            true,
							Description:         "ID of port / dc interface / octavia loadbalancer vip port.",
							MarkdownDescription: "ID of port / dc interface / octavia loadbalancer vip port.",
						},
						"type": schema.StringAttribute{
							Required:            true,
							Description:         "Type of association. Can be one of: port, dc_interface, octavia.",
							MarkdownDescription: "Type of association. Can be one of: port, dc_interface, octavia.",
							Validators: []validator.String{
								stringvalidator.OneOf(anycastips.AnycastIPAssociationTypeValues()...),
							},
						},
					},
					CustomType: AssociationsType{
						ObjectType: types.ObjectType{
							AttrTypes: AssociationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "List of port associations with anycast IP.",
				MarkdownDescription: "List of port associations with anycast IP.",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Description of the anycast IP.",
				MarkdownDescription: "Description of the anycast IP.",
			},
			"health_check": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"port": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "Port for check to connect to.",
						MarkdownDescription: "Port for check to connect to.",
					},
					"type": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Check type. Can be one of: TCP, ICMP.",
						MarkdownDescription: "Check type. Can be one of: TCP, ICMP.",
						Validators: []validator.String{
							stringvalidator.OneOf(anycastips.AnycastIPHealthCheckTypeValues()...),
						},
					},
				},
				CustomType: HealthCheckType{
					ObjectType: types.ObjectType{
						AttrTypes: HealthCheckValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Health check settings.",
				MarkdownDescription: "Health check settings.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the anycast IP.",
				MarkdownDescription: "ID of the anycast IP.",
			},
			"ip_address": schema.StringAttribute{
				Computed:            true,
				Description:         "Anycast IP address.",
				MarkdownDescription: "Anycast IP address.",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the anycast IP.",
				MarkdownDescription: "Name of the anycast IP.",
			},
			"network_id": schema.StringAttribute{
				Required:            true,
				Description:         "ID of the external network to choose ip for anycast IP from.",
				MarkdownDescription: "ID of the external network to choose ip for anycast IP from.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The region in which to obtain the Networking client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				MarkdownDescription: "The region in which to obtain the Networking client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"subnet_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Anycast IP subnet id.",
				MarkdownDescription: "Anycast IP subnet id.",
			},
		},
	}
}

type AnycastipModel struct {
	Associations types.Set        `tfsdk:"associations"`
	Description  types.String     `tfsdk:"description"`
	HealthCheck  HealthCheckValue `tfsdk:"health_check"`
	Id           types.String     `tfsdk:"id"`
	IpAddress    types.String     `tfsdk:"ip_address"`
	Name         types.String     `tfsdk:"name"`
	NetworkId    types.String     `tfsdk:"network_id"`
	Region       types.String     `tfsdk:"region"`
	SubnetId     types.String     `tfsdk:"subnet_id"`
}

var _ basetypes.ObjectTypable = AssociationsType{}

type AssociationsType struct {
	basetypes.ObjectType
}

func (t AssociationsType) Equal(o attr.Type) bool {
	other, ok := o.(AssociationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AssociationsType) String() string {
	return "AssociationsType"
}

func (t AssociationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AssociationsValue{
		Id:               idVal,
		AssociationsType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAssociationsValueNull() AssociationsValue {
	return AssociationsValue{
		state: attr.ValueStateNull,
	}
}

func NewAssociationsValueUnknown() AssociationsValue {
	return AssociationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAssociationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AssociationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AssociationsValue Attribute Value",
				"While creating a AssociationsValue value, a missing attribute value was detected. "+
					"A AssociationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssociationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AssociationsValue Attribute Type",
				"While creating a AssociationsValue value, an invalid attribute value was detected. "+
					"A AssociationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AssociationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AssociationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AssociationsValue Attribute Value",
				"While creating a AssociationsValue value, an extra attribute value was detected. "+
					"A AssociationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AssociationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAssociationsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewAssociationsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewAssociationsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewAssociationsValueUnknown(), diags
	}

	return AssociationsValue{
		Id:               idVal,
		AssociationsType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAssociationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AssociationsValue {
	object, diags := NewAssociationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAssociationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AssociationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAssociationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAssociationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAssociationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAssociationsValueMust(AssociationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AssociationsType) ValueType(ctx context.Context) attr.Value {
	return AssociationsValue{}
}

var _ basetypes.ObjectValuable = AssociationsValue{}

type AssociationsValue struct {
	Id               basetypes.StringValue `tfsdk:"id"`
	AssociationsType basetypes.StringValue `tfsdk:"type"`
	state            attr.ValueState
}

func (v AssociationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.AssociationsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AssociationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AssociationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AssociationsValue) String() string {
	return "AssociationsValue"
}

func (v AssociationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"type": v.AssociationsType,
		})

	return objVal, diags
}

func (v AssociationsValue) Equal(o attr.Value) bool {
	other, ok := o.(AssociationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.AssociationsType.Equal(other.AssociationsType) {
		return false
	}

	return true
}

func (v AssociationsValue) Type(ctx context.Context) attr.Type {
	return AssociationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AssociationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = HealthCheckType{}

type HealthCheckType struct {
	basetypes.ObjectType
}

func (t HealthCheckType) Equal(o attr.Type) bool {
	other, ok := o.(HealthCheckType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HealthCheckType) String() string {
	return "HealthCheckType"
}

func (t HealthCheckType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return nil, diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HealthCheckValue{
		Port:            portVal,
		HealthCheckType: typeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewHealthCheckValueNull() HealthCheckValue {
	return HealthCheckValue{
		state: attr.ValueStateNull,
	}
}

func NewHealthCheckValueUnknown() HealthCheckValue {
	return HealthCheckValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHealthCheckValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HealthCheckValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HealthCheckValue Attribute Value",
				"While creating a HealthCheckValue value, a missing attribute value was detected. "+
					"A HealthCheckValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HealthCheckValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HealthCheckValue Attribute Type",
				"While creating a HealthCheckValue value, an invalid attribute value was detected. "+
					"A HealthCheckValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HealthCheckValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HealthCheckValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HealthCheckValue Attribute Value",
				"While creating a HealthCheckValue value, an extra attribute value was detected. "+
					"A HealthCheckValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HealthCheckValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHealthCheckValueUnknown(), diags
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return NewHealthCheckValueUnknown(), diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewHealthCheckValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewHealthCheckValueUnknown(), diags
	}

	return HealthCheckValue{
		Port:            portVal,
		HealthCheckType: typeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewHealthCheckValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HealthCheckValue {
	object, diags := NewHealthCheckValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHealthCheckValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HealthCheckType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHealthCheckValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHealthCheckValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHealthCheckValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHealthCheckValueMust(HealthCheckValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HealthCheckType) ValueType(ctx context.Context) attr.Value {
	return HealthCheckValue{}
}

var _ basetypes.ObjectValuable = HealthCheckValue{}

type HealthCheckValue struct {
	Port            basetypes.Int64Value  `tfsdk:"port"`
	HealthCheckType basetypes.StringValue `tfsdk:"type"`
	state           attr.ValueState
}

func (v HealthCheckValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["port"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Port.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port"] = val

		val, err = v.HealthCheckType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HealthCheckValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HealthCheckValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HealthCheckValue) String() string {
	return "HealthCheckValue"
}

func (v HealthCheckValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"port": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"port": v.Port,
			"type": v.HealthCheckType,
		})

	return objVal, diags
}

func (v HealthCheckValue) Equal(o attr.Value) bool {
	other, ok := o.(HealthCheckValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Port.Equal(other.Port) {
		return false
	}

	if !v.HealthCheckType.Equal(other.HealthCheckType) {
		return false
	}

	return true
}

func (v HealthCheckValue) Type(ctx context.Context) attr.Type {
	return HealthCheckType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HealthCheckValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"port": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}
}
