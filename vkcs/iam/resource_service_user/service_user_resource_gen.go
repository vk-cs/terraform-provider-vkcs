// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_service_user

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ServiceUserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "Service user creation timestamp.",
				MarkdownDescription: "Service user creation timestamp.",
			},
			"creator_name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the user who created the service user.",
				MarkdownDescription: "Name of the user who created the service user.",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Description of the service user. The maximum length is 256 characters. Changing this creates a new resource.",
				MarkdownDescription: "Description of the service user. The maximum length is 256 characters. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the service user.",
				MarkdownDescription: "ID of the service user.",
			},
			"login": schema.StringAttribute{
				Computed:            true,
				Description:         "Login name of the service user.",
				MarkdownDescription: "Login name of the service user.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the service user. The name must be unique. The length must be between 3 and 32 characters. Changing this creates a new resource.",
				MarkdownDescription: "Name of the service user. The name must be unique. The length must be between 3 and 32 characters. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 32),
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-zA-Z_-]+$"), ""),
				},
			},
			"password": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				Description:         "Password of the service user. _note_ This is a sensitive attribute.",
				MarkdownDescription: "Password of the service user. _note_ This is a sensitive attribute.",
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The region in which to obtain the IAM Service Users client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				MarkdownDescription: "The region in which to obtain the IAM Service Users client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"role_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "Names of roles assigned to the service user. Changing this creates a new resource.",
				MarkdownDescription: "Names of roles assigned to the service user. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
		},
		Description: "Manages an IAM service user within VKCS.",
	}
}

type ServiceUserModel struct {
	CreatedAt   types.String `tfsdk:"created_at"`
	CreatorName types.String `tfsdk:"creator_name"`
	Description types.String `tfsdk:"description"`
	Id          types.String `tfsdk:"id"`
	Login       types.String `tfsdk:"login"`
	Name        types.String `tfsdk:"name"`
	Password    types.String `tfsdk:"password"`
	Region      types.String `tfsdk:"region"`
	RoleNames   types.List   `tfsdk:"role_names"`
}
