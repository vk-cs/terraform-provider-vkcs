// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_origin_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OriginGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "ID of the origin group.",
				MarkdownDescription: "ID of the origin group.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the origin group.",
				MarkdownDescription: "Name of the origin group.",
			},
			"origins": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"backup": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Defines whether the origin is a backup, meaning that it will not be used until one of active origins become unavailable. Defaults to false.",
							MarkdownDescription: "Defines whether the origin is a backup, meaning that it will not be used until one of active origins become unavailable. Defaults to false.",
							Default:             booldefault.StaticBool(false),
						},
						"enabled": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enables or disables an origin source in the origin group. Enabled by default.",
							MarkdownDescription: "Enables or disables an origin source in the origin group. Enabled by default.",
							Default:             booldefault.StaticBool(true),
						},
						"source": schema.StringAttribute{
							Required:            true,
							Description:         "IP address or domain name of the origin and the port, if custom port is used.",
							MarkdownDescription: "IP address or domain name of the origin and the port, if custom port is used.",
						},
					},
					CustomType: OriginsType{
						ObjectType: types.ObjectType{
							AttrTypes: OriginsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "List of origin sources in the origin group.",
				MarkdownDescription: "List of origin sources in the origin group.",
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The region in which to obtain the CDN client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				MarkdownDescription: "The region in which to obtain the CDN client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"use_next": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Defines whether to use the next origin from the origin group if origin responds with 4XX or 5XX codes. Defaults to false.",
				MarkdownDescription: "Defines whether to use the next origin from the origin group if origin responds with 4XX or 5XX codes. Defaults to false.",
				Default:             booldefault.StaticBool(false),
			},
		},
	}
}

type OriginGroupModel struct {
	Id      types.Int64  `tfsdk:"id"`
	Name    types.String `tfsdk:"name"`
	Origins types.List   `tfsdk:"origins"`
	Region  types.String `tfsdk:"region"`
	UseNext types.Bool   `tfsdk:"use_next"`
}

var _ basetypes.ObjectTypable = OriginsType{}

type OriginsType struct {
	basetypes.ObjectType
}

func (t OriginsType) Equal(o attr.Type) bool {
	other, ok := o.(OriginsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OriginsType) String() string {
	return "OriginsType"
}

func (t OriginsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	backupAttribute, ok := attributes["backup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backup is missing from object`)

		return nil, diags
	}

	backupVal, ok := backupAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backup expected to be basetypes.BoolValue, was: %T`, backupAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	sourceAttribute, ok := attributes["source"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source is missing from object`)

		return nil, diags
	}

	sourceVal, ok := sourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source expected to be basetypes.StringValue, was: %T`, sourceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OriginsValue{
		Backup:  backupVal,
		Enabled: enabledVal,
		Source:  sourceVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewOriginsValueNull() OriginsValue {
	return OriginsValue{
		state: attr.ValueStateNull,
	}
}

func NewOriginsValueUnknown() OriginsValue {
	return OriginsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOriginsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OriginsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OriginsValue Attribute Value",
				"While creating a OriginsValue value, a missing attribute value was detected. "+
					"A OriginsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OriginsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OriginsValue Attribute Type",
				"While creating a OriginsValue value, an invalid attribute value was detected. "+
					"A OriginsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OriginsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OriginsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OriginsValue Attribute Value",
				"While creating a OriginsValue value, an extra attribute value was detected. "+
					"A OriginsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OriginsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOriginsValueUnknown(), diags
	}

	backupAttribute, ok := attributes["backup"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`backup is missing from object`)

		return NewOriginsValueUnknown(), diags
	}

	backupVal, ok := backupAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`backup expected to be basetypes.BoolValue, was: %T`, backupAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewOriginsValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	sourceAttribute, ok := attributes["source"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source is missing from object`)

		return NewOriginsValueUnknown(), diags
	}

	sourceVal, ok := sourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source expected to be basetypes.StringValue, was: %T`, sourceAttribute))
	}

	if diags.HasError() {
		return NewOriginsValueUnknown(), diags
	}

	return OriginsValue{
		Backup:  backupVal,
		Enabled: enabledVal,
		Source:  sourceVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewOriginsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OriginsValue {
	object, diags := NewOriginsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOriginsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OriginsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOriginsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOriginsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOriginsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOriginsValueMust(OriginsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OriginsType) ValueType(ctx context.Context) attr.Value {
	return OriginsValue{}
}

var _ basetypes.ObjectValuable = OriginsValue{}

type OriginsValue struct {
	Backup  basetypes.BoolValue   `tfsdk:"backup"`
	Enabled basetypes.BoolValue   `tfsdk:"enabled"`
	Source  basetypes.StringValue `tfsdk:"source"`
	state   attr.ValueState
}

func (v OriginsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["backup"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["source"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Backup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["backup"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Source.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OriginsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OriginsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OriginsValue) String() string {
	return "OriginsValue"
}

func (v OriginsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"backup":  basetypes.BoolType{},
		"enabled": basetypes.BoolType{},
		"source":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"backup":  v.Backup,
			"enabled": v.Enabled,
			"source":  v.Source,
		})

	return objVal, diags
}

func (v OriginsValue) Equal(o attr.Value) bool {
	other, ok := o.(OriginsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Backup.Equal(other.Backup) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Source.Equal(other.Source) {
		return false
	}

	return true
}

func (v OriginsValue) Type(ctx context.Context) attr.Type {
	return OriginsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OriginsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"backup":  basetypes.BoolType{},
		"enabled": basetypes.BoolType{},
		"source":  basetypes.StringType{},
	}
}
