// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_shielding_pops

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ShieldingPopsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the resource.",
				MarkdownDescription: "ID of the resource.",
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The region in which to obtain the CDN client. If omitted, the `region` argument of the provider is used.",
				MarkdownDescription: "The region in which to obtain the CDN client. If omitted, the `region` argument of the provider is used.",
			},
			"shielding_pops": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"city": schema.StringAttribute{
							Computed:            true,
							Description:         "City of origin shielding location.",
							MarkdownDescription: "City of origin shielding location.",
						},
						"country": schema.StringAttribute{
							Computed:            true,
							Description:         "Country of origin shielding location.",
							MarkdownDescription: "Country of origin shielding location.",
						},
						"datacenter": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of origin shielding location datacenter.",
							MarkdownDescription: "Name of origin shielding location datacenter.",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "ID of the origin shielding location.",
							MarkdownDescription: "ID of the origin shielding location.",
						},
					},
					CustomType: ShieldingPopsType{
						ObjectType: types.ObjectType{
							AttrTypes: ShieldingPopsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of available origin shielding points of precense.",
				MarkdownDescription: "List of available origin shielding points of precense.",
			},
		},
	}
}

type ShieldingPopsModel struct {
	Id            types.String `tfsdk:"id"`
	Region        types.String `tfsdk:"region"`
	ShieldingPops types.List   `tfsdk:"shielding_pops"`
}

var _ basetypes.ObjectTypable = ShieldingPopsType{}

type ShieldingPopsType struct {
	basetypes.ObjectType
}

func (t ShieldingPopsType) Equal(o attr.Type) bool {
	other, ok := o.(ShieldingPopsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ShieldingPopsType) String() string {
	return "ShieldingPopsType"
}

func (t ShieldingPopsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return nil, diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	countryAttribute, ok := attributes["country"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country is missing from object`)

		return nil, diags
	}

	countryVal, ok := countryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country expected to be basetypes.StringValue, was: %T`, countryAttribute))
	}

	datacenterAttribute, ok := attributes["datacenter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`datacenter is missing from object`)

		return nil, diags
	}

	datacenterVal, ok := datacenterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`datacenter expected to be basetypes.StringValue, was: %T`, datacenterAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ShieldingPopsValue{
		City:       cityVal,
		Country:    countryVal,
		Datacenter: datacenterVal,
		Id:         idVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewShieldingPopsValueNull() ShieldingPopsValue {
	return ShieldingPopsValue{
		state: attr.ValueStateNull,
	}
}

func NewShieldingPopsValueUnknown() ShieldingPopsValue {
	return ShieldingPopsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewShieldingPopsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ShieldingPopsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ShieldingPopsValue Attribute Value",
				"While creating a ShieldingPopsValue value, a missing attribute value was detected. "+
					"A ShieldingPopsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ShieldingPopsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ShieldingPopsValue Attribute Type",
				"While creating a ShieldingPopsValue value, an invalid attribute value was detected. "+
					"A ShieldingPopsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ShieldingPopsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ShieldingPopsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ShieldingPopsValue Attribute Value",
				"While creating a ShieldingPopsValue value, an extra attribute value was detected. "+
					"A ShieldingPopsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ShieldingPopsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewShieldingPopsValueUnknown(), diags
	}

	cityAttribute, ok := attributes["city"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`city is missing from object`)

		return NewShieldingPopsValueUnknown(), diags
	}

	cityVal, ok := cityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`city expected to be basetypes.StringValue, was: %T`, cityAttribute))
	}

	countryAttribute, ok := attributes["country"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country is missing from object`)

		return NewShieldingPopsValueUnknown(), diags
	}

	countryVal, ok := countryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country expected to be basetypes.StringValue, was: %T`, countryAttribute))
	}

	datacenterAttribute, ok := attributes["datacenter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`datacenter is missing from object`)

		return NewShieldingPopsValueUnknown(), diags
	}

	datacenterVal, ok := datacenterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`datacenter expected to be basetypes.StringValue, was: %T`, datacenterAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewShieldingPopsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	if diags.HasError() {
		return NewShieldingPopsValueUnknown(), diags
	}

	return ShieldingPopsValue{
		City:       cityVal,
		Country:    countryVal,
		Datacenter: datacenterVal,
		Id:         idVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewShieldingPopsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ShieldingPopsValue {
	object, diags := NewShieldingPopsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewShieldingPopsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ShieldingPopsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewShieldingPopsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewShieldingPopsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewShieldingPopsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewShieldingPopsValueMust(ShieldingPopsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ShieldingPopsType) ValueType(ctx context.Context) attr.Value {
	return ShieldingPopsValue{}
}

var _ basetypes.ObjectValuable = ShieldingPopsValue{}

type ShieldingPopsValue struct {
	City       basetypes.StringValue `tfsdk:"city"`
	Country    basetypes.StringValue `tfsdk:"country"`
	Datacenter basetypes.StringValue `tfsdk:"datacenter"`
	Id         basetypes.Int64Value  `tfsdk:"id"`
	state      attr.ValueState
}

func (v ShieldingPopsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["city"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["country"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["datacenter"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.City.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["city"] = val

		val, err = v.Country.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country"] = val

		val, err = v.Datacenter.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["datacenter"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ShieldingPopsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ShieldingPopsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ShieldingPopsValue) String() string {
	return "ShieldingPopsValue"
}

func (v ShieldingPopsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"city":       basetypes.StringType{},
		"country":    basetypes.StringType{},
		"datacenter": basetypes.StringType{},
		"id":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"city":       v.City,
			"country":    v.Country,
			"datacenter": v.Datacenter,
			"id":         v.Id,
		})

	return objVal, diags
}

func (v ShieldingPopsValue) Equal(o attr.Value) bool {
	other, ok := o.(ShieldingPopsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.City.Equal(other.City) {
		return false
	}

	if !v.Country.Equal(other.Country) {
		return false
	}

	if !v.Datacenter.Equal(other.Datacenter) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	return true
}

func (v ShieldingPopsValue) Type(ctx context.Context) attr.Type {
	return ShieldingPopsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ShieldingPopsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"city":       basetypes.StringType{},
		"country":    basetypes.StringType{},
		"datacenter": basetypes.StringType{},
		"id":         basetypes.Int64Type{},
	}
}
