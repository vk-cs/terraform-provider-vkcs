// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_product

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ProductDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"configs": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"connections": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"is_required": schema.BoolAttribute{
									Computed:            true,
									Description:         "Is connection required",
									MarkdownDescription: "Is connection required",
								},
								"plug": schema.StringAttribute{
									Computed:            true,
									Description:         "Connection type",
									MarkdownDescription: "Connection type",
								},
								"position": schema.Int64Attribute{
									Computed:            true,
									Description:         "Connection position",
									MarkdownDescription: "Connection position",
								},
								"required_group": schema.StringAttribute{
									Computed:            true,
									Description:         "Connection required group",
									MarkdownDescription: "Connection required group",
								},
								"settings": schema.ListNestedAttribute{
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"alias": schema.StringAttribute{
												Computed:            true,
												Description:         "Setting alias",
												MarkdownDescription: "Setting alias",
											},
											"default_value": schema.StringAttribute{
												Computed:            true,
												Description:         "Setting default value",
												MarkdownDescription: "Setting default value",
											},
											"is_require": schema.BoolAttribute{
												Computed:            true,
												Description:         "Is setting required",
												MarkdownDescription: "Is setting required",
											},
											"is_sensitive": schema.BoolAttribute{
												Computed:            true,
												Description:         "Is setting sensitive",
												MarkdownDescription: "Is setting sensitive",
											},
											"regexp": schema.StringAttribute{
												Computed:            true,
												Description:         "Setting validation regexp",
												MarkdownDescription: "Setting validation regexp",
											},
											"string_variation": schema.ListAttribute{
												ElementType:         types.StringType,
												Computed:            true,
												Description:         "Available setting values",
												MarkdownDescription: "Available setting values",
											},
										},
										CustomType: ConfigsConnectionsSettingsType{
											ObjectType: types.ObjectType{
												AttrTypes: ConfigsConnectionsSettingsValue{}.AttributeTypes(ctx),
											},
										},
									},
									Computed:            true,
									Description:         "Connection settings",
									MarkdownDescription: "Connection settings",
								},
							},
							CustomType: ConfigsConnectionsType{
								ObjectType: types.ObjectType{
									AttrTypes: ConfigsConnectionsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed:            true,
						Description:         "Product connections configuration info",
						MarkdownDescription: "Product connections configuration info",
					},
					"settings": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"alias": schema.StringAttribute{
									Computed:            true,
									Description:         "Setting alias",
									MarkdownDescription: "Setting alias",
								},
								"default_value": schema.StringAttribute{
									Computed:            true,
									Description:         "Setting default value",
									MarkdownDescription: "Setting default value",
								},
								"is_require": schema.BoolAttribute{
									Computed:            true,
									Description:         "Is setting required",
									MarkdownDescription: "Is setting required",
								},
								"is_sensitive": schema.BoolAttribute{
									Computed:            true,
									Description:         "Is setting sensitive",
									MarkdownDescription: "Is setting sensitive",
								},
								"regexp": schema.StringAttribute{
									Computed:            true,
									Description:         "Setting validation regexp",
									MarkdownDescription: "Setting validation regexp",
								},
								"string_variation": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "Available setting values",
									MarkdownDescription: "Available setting values",
								},
							},
							CustomType: ConfigsSettingsType{
								ObjectType: types.ObjectType{
									AttrTypes: ConfigsSettingsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed:            true,
						Description:         "Product settings",
						MarkdownDescription: "Product settings",
					},
				},
				CustomType: ConfigsType{
					ObjectType: types.ObjectType{
						AttrTypes: ConfigsValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"product_name": schema.StringAttribute{
				Required:            true,
				Description:         "Product name",
				MarkdownDescription: "Product name",
			},
			"product_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Product version",
				MarkdownDescription: "Product version",
			},
			"region": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The region in which to obtain the Data platform client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
				MarkdownDescription: "The region in which to obtain the Data platform client. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
			},
		},
	}
}

type ProductModel struct {
	Configs        ConfigsValue `tfsdk:"configs"`
	ProductName    types.String `tfsdk:"product_name"`
	ProductVersion types.String `tfsdk:"product_version"`
	Region         types.String `tfsdk:"region"`
}

var _ basetypes.ObjectTypable = ConfigsType{}

type ConfigsType struct {
	basetypes.ObjectType
}

func (t ConfigsType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigsType) String() string {
	return "ConfigsType"
}

func (t ConfigsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	connectionsAttribute, ok := attributes["connections"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connections is missing from object`)

		return nil, diags
	}

	connectionsVal, ok := connectionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connections expected to be basetypes.ListValue, was: %T`, connectionsAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ListValue, was: %T`, settingsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigsValue{
		Connections: connectionsVal,
		Settings:    settingsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewConfigsValueNull() ConfigsValue {
	return ConfigsValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigsValueUnknown() ConfigsValue {
	return ConfigsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigsValue Attribute Value",
				"While creating a ConfigsValue value, a missing attribute value was detected. "+
					"A ConfigsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigsValue Attribute Type",
				"While creating a ConfigsValue value, an invalid attribute value was detected. "+
					"A ConfigsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigsValue Attribute Value",
				"While creating a ConfigsValue value, an extra attribute value was detected. "+
					"A ConfigsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigsValueUnknown(), diags
	}

	connectionsAttribute, ok := attributes["connections"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connections is missing from object`)

		return NewConfigsValueUnknown(), diags
	}

	connectionsVal, ok := connectionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connections expected to be basetypes.ListValue, was: %T`, connectionsAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewConfigsValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ListValue, was: %T`, settingsAttribute))
	}

	if diags.HasError() {
		return NewConfigsValueUnknown(), diags
	}

	return ConfigsValue{
		Connections: connectionsVal,
		Settings:    settingsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewConfigsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigsValue {
	object, diags := NewConfigsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigsValueMust(ConfigsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigsType) ValueType(ctx context.Context) attr.Value {
	return ConfigsValue{}
}

var _ basetypes.ObjectValuable = ConfigsValue{}

type ConfigsValue struct {
	Connections basetypes.ListValue `tfsdk:"connections"`
	Settings    basetypes.ListValue `tfsdk:"settings"`
	state       attr.ValueState
}

func (v ConfigsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["connections"] = basetypes.ListType{
		ElemType: ConfigsConnectionsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.ListType{
		ElemType: ConfigsSettingsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Connections.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connections"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigsValue) String() string {
	return "ConfigsValue"
}

func (v ConfigsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	connections := types.ListValueMust(
		ConfigsConnectionsType{
			basetypes.ObjectType{
				AttrTypes: ConfigsConnectionsValue{}.AttributeTypes(ctx),
			},
		},
		v.Connections.Elements(),
	)

	if v.Connections.IsNull() {
		connections = types.ListNull(
			ConfigsConnectionsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsConnectionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Connections.IsUnknown() {
		connections = types.ListUnknown(
			ConfigsConnectionsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsConnectionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	settings := types.ListValueMust(
		ConfigsSettingsType{
			basetypes.ObjectType{
				AttrTypes: ConfigsSettingsValue{}.AttributeTypes(ctx),
			},
		},
		v.Settings.Elements(),
	)

	if v.Settings.IsNull() {
		settings = types.ListNull(
			ConfigsSettingsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsSettingsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ListUnknown(
			ConfigsSettingsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsSettingsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"connections": basetypes.ListType{
			ElemType: ConfigsConnectionsValue{}.Type(ctx),
		},
		"settings": basetypes.ListType{
			ElemType: ConfigsSettingsValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"connections": connections,
			"settings":    settings,
		})

	return objVal, diags
}

func (v ConfigsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Connections.Equal(other.Connections) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	return true
}

func (v ConfigsValue) Type(ctx context.Context) attr.Type {
	return ConfigsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"connections": basetypes.ListType{
			ElemType: ConfigsConnectionsValue{}.Type(ctx),
		},
		"settings": basetypes.ListType{
			ElemType: ConfigsSettingsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ConfigsConnectionsType{}

type ConfigsConnectionsType struct {
	basetypes.ObjectType
}

func (t ConfigsConnectionsType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigsConnectionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigsConnectionsType) String() string {
	return "ConfigsConnectionsType"
}

func (t ConfigsConnectionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isRequiredAttribute, ok := attributes["is_required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_required is missing from object`)

		return nil, diags
	}

	isRequiredVal, ok := isRequiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_required expected to be basetypes.BoolValue, was: %T`, isRequiredAttribute))
	}

	plugAttribute, ok := attributes["plug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plug is missing from object`)

		return nil, diags
	}

	plugVal, ok := plugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plug expected to be basetypes.StringValue, was: %T`, plugAttribute))
	}

	positionAttribute, ok := attributes["position"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`position is missing from object`)

		return nil, diags
	}

	positionVal, ok := positionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`position expected to be basetypes.Int64Value, was: %T`, positionAttribute))
	}

	requiredGroupAttribute, ok := attributes["required_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_group is missing from object`)

		return nil, diags
	}

	requiredGroupVal, ok := requiredGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_group expected to be basetypes.StringValue, was: %T`, requiredGroupAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return nil, diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ListValue, was: %T`, settingsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigsConnectionsValue{
		IsRequired:    isRequiredVal,
		Plug:          plugVal,
		Position:      positionVal,
		RequiredGroup: requiredGroupVal,
		Settings:      settingsVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewConfigsConnectionsValueNull() ConfigsConnectionsValue {
	return ConfigsConnectionsValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigsConnectionsValueUnknown() ConfigsConnectionsValue {
	return ConfigsConnectionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigsConnectionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigsConnectionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigsConnectionsValue Attribute Value",
				"While creating a ConfigsConnectionsValue value, a missing attribute value was detected. "+
					"A ConfigsConnectionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsConnectionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigsConnectionsValue Attribute Type",
				"While creating a ConfigsConnectionsValue value, an invalid attribute value was detected. "+
					"A ConfigsConnectionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsConnectionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigsConnectionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigsConnectionsValue Attribute Value",
				"While creating a ConfigsConnectionsValue value, an extra attribute value was detected. "+
					"A ConfigsConnectionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigsConnectionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigsConnectionsValueUnknown(), diags
	}

	isRequiredAttribute, ok := attributes["is_required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_required is missing from object`)

		return NewConfigsConnectionsValueUnknown(), diags
	}

	isRequiredVal, ok := isRequiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_required expected to be basetypes.BoolValue, was: %T`, isRequiredAttribute))
	}

	plugAttribute, ok := attributes["plug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plug is missing from object`)

		return NewConfigsConnectionsValueUnknown(), diags
	}

	plugVal, ok := plugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plug expected to be basetypes.StringValue, was: %T`, plugAttribute))
	}

	positionAttribute, ok := attributes["position"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`position is missing from object`)

		return NewConfigsConnectionsValueUnknown(), diags
	}

	positionVal, ok := positionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`position expected to be basetypes.Int64Value, was: %T`, positionAttribute))
	}

	requiredGroupAttribute, ok := attributes["required_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_group is missing from object`)

		return NewConfigsConnectionsValueUnknown(), diags
	}

	requiredGroupVal, ok := requiredGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_group expected to be basetypes.StringValue, was: %T`, requiredGroupAttribute))
	}

	settingsAttribute, ok := attributes["settings"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settings is missing from object`)

		return NewConfigsConnectionsValueUnknown(), diags
	}

	settingsVal, ok := settingsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settings expected to be basetypes.ListValue, was: %T`, settingsAttribute))
	}

	if diags.HasError() {
		return NewConfigsConnectionsValueUnknown(), diags
	}

	return ConfigsConnectionsValue{
		IsRequired:    isRequiredVal,
		Plug:          plugVal,
		Position:      positionVal,
		RequiredGroup: requiredGroupVal,
		Settings:      settingsVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewConfigsConnectionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigsConnectionsValue {
	object, diags := NewConfigsConnectionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigsConnectionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigsConnectionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigsConnectionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigsConnectionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigsConnectionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigsConnectionsValueMust(ConfigsConnectionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigsConnectionsType) ValueType(ctx context.Context) attr.Value {
	return ConfigsConnectionsValue{}
}

var _ basetypes.ObjectValuable = ConfigsConnectionsValue{}

type ConfigsConnectionsValue struct {
	IsRequired    basetypes.BoolValue   `tfsdk:"is_required"`
	Plug          basetypes.StringValue `tfsdk:"plug"`
	Position      basetypes.Int64Value  `tfsdk:"position"`
	RequiredGroup basetypes.StringValue `tfsdk:"required_group"`
	Settings      basetypes.ListValue   `tfsdk:"settings"`
	state         attr.ValueState
}

func (v ConfigsConnectionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["is_required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["plug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["position"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["required_group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["settings"] = basetypes.ListType{
		ElemType: ConfigsConnectionsSettingsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.IsRequired.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_required"] = val

		val, err = v.Plug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plug"] = val

		val, err = v.Position.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["position"] = val

		val, err = v.RequiredGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["required_group"] = val

		val, err = v.Settings.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settings"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigsConnectionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigsConnectionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigsConnectionsValue) String() string {
	return "ConfigsConnectionsValue"
}

func (v ConfigsConnectionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	settings := types.ListValueMust(
		ConfigsConnectionsSettingsType{
			basetypes.ObjectType{
				AttrTypes: ConfigsConnectionsSettingsValue{}.AttributeTypes(ctx),
			},
		},
		v.Settings.Elements(),
	)

	if v.Settings.IsNull() {
		settings = types.ListNull(
			ConfigsConnectionsSettingsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsConnectionsSettingsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Settings.IsUnknown() {
		settings = types.ListUnknown(
			ConfigsConnectionsSettingsType{
				basetypes.ObjectType{
					AttrTypes: ConfigsConnectionsSettingsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"is_required":    basetypes.BoolType{},
		"plug":           basetypes.StringType{},
		"position":       basetypes.Int64Type{},
		"required_group": basetypes.StringType{},
		"settings": basetypes.ListType{
			ElemType: ConfigsConnectionsSettingsValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"is_required":    v.IsRequired,
			"plug":           v.Plug,
			"position":       v.Position,
			"required_group": v.RequiredGroup,
			"settings":       settings,
		})

	return objVal, diags
}

func (v ConfigsConnectionsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigsConnectionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsRequired.Equal(other.IsRequired) {
		return false
	}

	if !v.Plug.Equal(other.Plug) {
		return false
	}

	if !v.Position.Equal(other.Position) {
		return false
	}

	if !v.RequiredGroup.Equal(other.RequiredGroup) {
		return false
	}

	if !v.Settings.Equal(other.Settings) {
		return false
	}

	return true
}

func (v ConfigsConnectionsValue) Type(ctx context.Context) attr.Type {
	return ConfigsConnectionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigsConnectionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_required":    basetypes.BoolType{},
		"plug":           basetypes.StringType{},
		"position":       basetypes.Int64Type{},
		"required_group": basetypes.StringType{},
		"settings": basetypes.ListType{
			ElemType: ConfigsConnectionsSettingsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ConfigsConnectionsSettingsType{}

type ConfigsConnectionsSettingsType struct {
	basetypes.ObjectType
}

func (t ConfigsConnectionsSettingsType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigsConnectionsSettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigsConnectionsSettingsType) String() string {
	return "ConfigsConnectionsSettingsType"
}

func (t ConfigsConnectionsSettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return nil, diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.StringValue, was: %T`, aliasAttribute))
	}

	defaultValueAttribute, ok := attributes["default_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_value is missing from object`)

		return nil, diags
	}

	defaultValueVal, ok := defaultValueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_value expected to be basetypes.StringValue, was: %T`, defaultValueAttribute))
	}

	isRequireAttribute, ok := attributes["is_require"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_require is missing from object`)

		return nil, diags
	}

	isRequireVal, ok := isRequireAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_require expected to be basetypes.BoolValue, was: %T`, isRequireAttribute))
	}

	isSensitiveAttribute, ok := attributes["is_sensitive"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sensitive is missing from object`)

		return nil, diags
	}

	isSensitiveVal, ok := isSensitiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sensitive expected to be basetypes.BoolValue, was: %T`, isSensitiveAttribute))
	}

	regexpAttribute, ok := attributes["regexp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regexp is missing from object`)

		return nil, diags
	}

	regexpVal, ok := regexpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regexp expected to be basetypes.StringValue, was: %T`, regexpAttribute))
	}

	stringVariationAttribute, ok := attributes["string_variation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`string_variation is missing from object`)

		return nil, diags
	}

	stringVariationVal, ok := stringVariationAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`string_variation expected to be basetypes.ListValue, was: %T`, stringVariationAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigsConnectionsSettingsValue{
		Alias:           aliasVal,
		DefaultValue:    defaultValueVal,
		IsRequire:       isRequireVal,
		IsSensitive:     isSensitiveVal,
		Regexp:          regexpVal,
		StringVariation: stringVariationVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewConfigsConnectionsSettingsValueNull() ConfigsConnectionsSettingsValue {
	return ConfigsConnectionsSettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigsConnectionsSettingsValueUnknown() ConfigsConnectionsSettingsValue {
	return ConfigsConnectionsSettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigsConnectionsSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigsConnectionsSettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigsConnectionsSettingsValue Attribute Value",
				"While creating a ConfigsConnectionsSettingsValue value, a missing attribute value was detected. "+
					"A ConfigsConnectionsSettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsConnectionsSettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigsConnectionsSettingsValue Attribute Type",
				"While creating a ConfigsConnectionsSettingsValue value, an invalid attribute value was detected. "+
					"A ConfigsConnectionsSettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsConnectionsSettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigsConnectionsSettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigsConnectionsSettingsValue Attribute Value",
				"While creating a ConfigsConnectionsSettingsValue value, an extra attribute value was detected. "+
					"A ConfigsConnectionsSettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigsConnectionsSettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.StringValue, was: %T`, aliasAttribute))
	}

	defaultValueAttribute, ok := attributes["default_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_value is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	defaultValueVal, ok := defaultValueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_value expected to be basetypes.StringValue, was: %T`, defaultValueAttribute))
	}

	isRequireAttribute, ok := attributes["is_require"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_require is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	isRequireVal, ok := isRequireAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_require expected to be basetypes.BoolValue, was: %T`, isRequireAttribute))
	}

	isSensitiveAttribute, ok := attributes["is_sensitive"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sensitive is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	isSensitiveVal, ok := isSensitiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sensitive expected to be basetypes.BoolValue, was: %T`, isSensitiveAttribute))
	}

	regexpAttribute, ok := attributes["regexp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regexp is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	regexpVal, ok := regexpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regexp expected to be basetypes.StringValue, was: %T`, regexpAttribute))
	}

	stringVariationAttribute, ok := attributes["string_variation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`string_variation is missing from object`)

		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	stringVariationVal, ok := stringVariationAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`string_variation expected to be basetypes.ListValue, was: %T`, stringVariationAttribute))
	}

	if diags.HasError() {
		return NewConfigsConnectionsSettingsValueUnknown(), diags
	}

	return ConfigsConnectionsSettingsValue{
		Alias:           aliasVal,
		DefaultValue:    defaultValueVal,
		IsRequire:       isRequireVal,
		IsSensitive:     isSensitiveVal,
		Regexp:          regexpVal,
		StringVariation: stringVariationVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewConfigsConnectionsSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigsConnectionsSettingsValue {
	object, diags := NewConfigsConnectionsSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigsConnectionsSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigsConnectionsSettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigsConnectionsSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigsConnectionsSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigsConnectionsSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigsConnectionsSettingsValueMust(ConfigsConnectionsSettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigsConnectionsSettingsType) ValueType(ctx context.Context) attr.Value {
	return ConfigsConnectionsSettingsValue{}
}

var _ basetypes.ObjectValuable = ConfigsConnectionsSettingsValue{}

type ConfigsConnectionsSettingsValue struct {
	Alias           basetypes.StringValue `tfsdk:"alias"`
	DefaultValue    basetypes.StringValue `tfsdk:"default_value"`
	IsRequire       basetypes.BoolValue   `tfsdk:"is_require"`
	IsSensitive     basetypes.BoolValue   `tfsdk:"is_sensitive"`
	Regexp          basetypes.StringValue `tfsdk:"regexp"`
	StringVariation basetypes.ListValue   `tfsdk:"string_variation"`
	state           attr.ValueState
}

func (v ConfigsConnectionsSettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["alias"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["default_value"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_require"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_sensitive"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["regexp"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["string_variation"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Alias.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alias"] = val

		val, err = v.DefaultValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["default_value"] = val

		val, err = v.IsRequire.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_require"] = val

		val, err = v.IsSensitive.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_sensitive"] = val

		val, err = v.Regexp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["regexp"] = val

		val, err = v.StringVariation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["string_variation"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigsConnectionsSettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigsConnectionsSettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigsConnectionsSettingsValue) String() string {
	return "ConfigsConnectionsSettingsValue"
}

func (v ConfigsConnectionsSettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var stringVariationVal basetypes.ListValue
	switch {
	case v.StringVariation.IsUnknown():
		stringVariationVal = types.ListUnknown(types.StringType)
	case v.StringVariation.IsNull():
		stringVariationVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		stringVariationVal, d = types.ListValue(types.StringType, v.StringVariation.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"alias":         basetypes.StringType{},
			"default_value": basetypes.StringType{},
			"is_require":    basetypes.BoolType{},
			"is_sensitive":  basetypes.BoolType{},
			"regexp":        basetypes.StringType{},
			"string_variation": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"alias":         basetypes.StringType{},
		"default_value": basetypes.StringType{},
		"is_require":    basetypes.BoolType{},
		"is_sensitive":  basetypes.BoolType{},
		"regexp":        basetypes.StringType{},
		"string_variation": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alias":            v.Alias,
			"default_value":    v.DefaultValue,
			"is_require":       v.IsRequire,
			"is_sensitive":     v.IsSensitive,
			"regexp":           v.Regexp,
			"string_variation": stringVariationVal,
		})

	return objVal, diags
}

func (v ConfigsConnectionsSettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigsConnectionsSettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Alias.Equal(other.Alias) {
		return false
	}

	if !v.DefaultValue.Equal(other.DefaultValue) {
		return false
	}

	if !v.IsRequire.Equal(other.IsRequire) {
		return false
	}

	if !v.IsSensitive.Equal(other.IsSensitive) {
		return false
	}

	if !v.Regexp.Equal(other.Regexp) {
		return false
	}

	if !v.StringVariation.Equal(other.StringVariation) {
		return false
	}

	return true
}

func (v ConfigsConnectionsSettingsValue) Type(ctx context.Context) attr.Type {
	return ConfigsConnectionsSettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigsConnectionsSettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alias":         basetypes.StringType{},
		"default_value": basetypes.StringType{},
		"is_require":    basetypes.BoolType{},
		"is_sensitive":  basetypes.BoolType{},
		"regexp":        basetypes.StringType{},
		"string_variation": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = ConfigsSettingsType{}

type ConfigsSettingsType struct {
	basetypes.ObjectType
}

func (t ConfigsSettingsType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigsSettingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigsSettingsType) String() string {
	return "ConfigsSettingsType"
}

func (t ConfigsSettingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return nil, diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.StringValue, was: %T`, aliasAttribute))
	}

	defaultValueAttribute, ok := attributes["default_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_value is missing from object`)

		return nil, diags
	}

	defaultValueVal, ok := defaultValueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_value expected to be basetypes.StringValue, was: %T`, defaultValueAttribute))
	}

	isRequireAttribute, ok := attributes["is_require"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_require is missing from object`)

		return nil, diags
	}

	isRequireVal, ok := isRequireAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_require expected to be basetypes.BoolValue, was: %T`, isRequireAttribute))
	}

	isSensitiveAttribute, ok := attributes["is_sensitive"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sensitive is missing from object`)

		return nil, diags
	}

	isSensitiveVal, ok := isSensitiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sensitive expected to be basetypes.BoolValue, was: %T`, isSensitiveAttribute))
	}

	regexpAttribute, ok := attributes["regexp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regexp is missing from object`)

		return nil, diags
	}

	regexpVal, ok := regexpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regexp expected to be basetypes.StringValue, was: %T`, regexpAttribute))
	}

	stringVariationAttribute, ok := attributes["string_variation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`string_variation is missing from object`)

		return nil, diags
	}

	stringVariationVal, ok := stringVariationAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`string_variation expected to be basetypes.ListValue, was: %T`, stringVariationAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigsSettingsValue{
		Alias:           aliasVal,
		DefaultValue:    defaultValueVal,
		IsRequire:       isRequireVal,
		IsSensitive:     isSensitiveVal,
		Regexp:          regexpVal,
		StringVariation: stringVariationVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewConfigsSettingsValueNull() ConfigsSettingsValue {
	return ConfigsSettingsValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigsSettingsValueUnknown() ConfigsSettingsValue {
	return ConfigsSettingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigsSettingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigsSettingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigsSettingsValue Attribute Value",
				"While creating a ConfigsSettingsValue value, a missing attribute value was detected. "+
					"A ConfigsSettingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsSettingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigsSettingsValue Attribute Type",
				"While creating a ConfigsSettingsValue value, an invalid attribute value was detected. "+
					"A ConfigsSettingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigsSettingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigsSettingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigsSettingsValue Attribute Value",
				"While creating a ConfigsSettingsValue value, an extra attribute value was detected. "+
					"A ConfigsSettingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigsSettingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigsSettingsValueUnknown(), diags
	}

	aliasAttribute, ok := attributes["alias"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alias is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	aliasVal, ok := aliasAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alias expected to be basetypes.StringValue, was: %T`, aliasAttribute))
	}

	defaultValueAttribute, ok := attributes["default_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_value is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	defaultValueVal, ok := defaultValueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_value expected to be basetypes.StringValue, was: %T`, defaultValueAttribute))
	}

	isRequireAttribute, ok := attributes["is_require"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_require is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	isRequireVal, ok := isRequireAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_require expected to be basetypes.BoolValue, was: %T`, isRequireAttribute))
	}

	isSensitiveAttribute, ok := attributes["is_sensitive"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_sensitive is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	isSensitiveVal, ok := isSensitiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_sensitive expected to be basetypes.BoolValue, was: %T`, isSensitiveAttribute))
	}

	regexpAttribute, ok := attributes["regexp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regexp is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	regexpVal, ok := regexpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regexp expected to be basetypes.StringValue, was: %T`, regexpAttribute))
	}

	stringVariationAttribute, ok := attributes["string_variation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`string_variation is missing from object`)

		return NewConfigsSettingsValueUnknown(), diags
	}

	stringVariationVal, ok := stringVariationAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`string_variation expected to be basetypes.ListValue, was: %T`, stringVariationAttribute))
	}

	if diags.HasError() {
		return NewConfigsSettingsValueUnknown(), diags
	}

	return ConfigsSettingsValue{
		Alias:           aliasVal,
		DefaultValue:    defaultValueVal,
		IsRequire:       isRequireVal,
		IsSensitive:     isSensitiveVal,
		Regexp:          regexpVal,
		StringVariation: stringVariationVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewConfigsSettingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigsSettingsValue {
	object, diags := NewConfigsSettingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigsSettingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigsSettingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigsSettingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigsSettingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigsSettingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigsSettingsValueMust(ConfigsSettingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigsSettingsType) ValueType(ctx context.Context) attr.Value {
	return ConfigsSettingsValue{}
}

var _ basetypes.ObjectValuable = ConfigsSettingsValue{}

type ConfigsSettingsValue struct {
	Alias           basetypes.StringValue `tfsdk:"alias"`
	DefaultValue    basetypes.StringValue `tfsdk:"default_value"`
	IsRequire       basetypes.BoolValue   `tfsdk:"is_require"`
	IsSensitive     basetypes.BoolValue   `tfsdk:"is_sensitive"`
	Regexp          basetypes.StringValue `tfsdk:"regexp"`
	StringVariation basetypes.ListValue   `tfsdk:"string_variation"`
	state           attr.ValueState
}

func (v ConfigsSettingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["alias"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["default_value"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_require"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_sensitive"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["regexp"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["string_variation"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Alias.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alias"] = val

		val, err = v.DefaultValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["default_value"] = val

		val, err = v.IsRequire.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_require"] = val

		val, err = v.IsSensitive.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_sensitive"] = val

		val, err = v.Regexp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["regexp"] = val

		val, err = v.StringVariation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["string_variation"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigsSettingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigsSettingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigsSettingsValue) String() string {
	return "ConfigsSettingsValue"
}

func (v ConfigsSettingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var stringVariationVal basetypes.ListValue
	switch {
	case v.StringVariation.IsUnknown():
		stringVariationVal = types.ListUnknown(types.StringType)
	case v.StringVariation.IsNull():
		stringVariationVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		stringVariationVal, d = types.ListValue(types.StringType, v.StringVariation.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"alias":         basetypes.StringType{},
			"default_value": basetypes.StringType{},
			"is_require":    basetypes.BoolType{},
			"is_sensitive":  basetypes.BoolType{},
			"regexp":        basetypes.StringType{},
			"string_variation": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"alias":         basetypes.StringType{},
		"default_value": basetypes.StringType{},
		"is_require":    basetypes.BoolType{},
		"is_sensitive":  basetypes.BoolType{},
		"regexp":        basetypes.StringType{},
		"string_variation": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alias":            v.Alias,
			"default_value":    v.DefaultValue,
			"is_require":       v.IsRequire,
			"is_sensitive":     v.IsSensitive,
			"regexp":           v.Regexp,
			"string_variation": stringVariationVal,
		})

	return objVal, diags
}

func (v ConfigsSettingsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigsSettingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Alias.Equal(other.Alias) {
		return false
	}

	if !v.DefaultValue.Equal(other.DefaultValue) {
		return false
	}

	if !v.IsRequire.Equal(other.IsRequire) {
		return false
	}

	if !v.IsSensitive.Equal(other.IsSensitive) {
		return false
	}

	if !v.Regexp.Equal(other.Regexp) {
		return false
	}

	if !v.StringVariation.Equal(other.StringVariation) {
		return false
	}

	return true
}

func (v ConfigsSettingsValue) Type(ctx context.Context) attr.Type {
	return ConfigsSettingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigsSettingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alias":         basetypes.StringType{},
		"default_value": basetypes.StringType{},
		"is_require":    basetypes.BoolType{},
		"is_sensitive":  basetypes.BoolType{},
		"regexp":        basetypes.StringType{},
		"string_variation": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
