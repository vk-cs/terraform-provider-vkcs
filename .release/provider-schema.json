{
  "provider_name": "vkcs",
  "provider_version": "v0.5.1",
  "schema_version": "1",
  "provider_schema": {
    "schema": {
      "auth_url": {
        "type": "TypeString",
        "optional": true,
        "description": "The Identity authentication URL."
      },
      "cloud_containers_api_version": {
        "type": "TypeString",
        "optional": true,
        "description": "Cloud Containers API version to use. _note_ Only for custom VKCS deployments."
      },
      "password": {
        "type": "TypeString",
        "optional": true,
        "description": "Password to login with."
      },
      "project_id": {
        "type": "TypeString",
        "optional": true,
        "description": "The ID of Project to login with."
      },
      "region": {
        "type": "TypeString",
        "optional": true,
        "description": "A region to use."
      },
      "user_domain_id": {
        "type": "TypeString",
        "optional": true,
        "description": "The id of the domain where the user resides."
      },
      "user_domain_name": {
        "type": "TypeString",
        "optional": true,
        "description": "The name of the domain where the user resides."
      },
      "username": {
        "type": "TypeString",
        "optional": true,
        "description": "User name to login with."
      }
    },
    "resources": {
      "vkcs_backup_plan": {
        "schema": {
          "full_retention": {
            "optional": true,
            "description": "Parameters for full retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full. Incompatible with gfs_retention"
          },
          "gfs_retention": {
            "optional": true,
            "description": "Parameters for gfs retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full. Incompatible with full_retention"
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "incremental_backup": {
            "type": "TypeBool",
            "required": true,
            "description": "Whether incremental backups strategy should be used. If enabled, the schedule.date field must specify one day, on which full backup will be created. On other days, incremental backups will be created. _note_ This option may be enabled for only for 'cloud_servers' provider."
          },
          "instance_ids": {
            "type": "TypeList",
            "required": true,
            "description": "List of ids of instances to make backup for",
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "Name of the backup plan"
          },
          "provider_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of backup provider",
            "computed": true
          },
          "provider_name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of backup provider, must be one of: cloud_servers, dbaas",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "schedule": {
            "required": true
          }
        },
        "description": "Manages a backup plan resource.",
        "new_since": "v0.4.0"
      },
      "vkcs_blockstorage_snapshot": {
        "schema": {
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The description of the volume."
          },
          "force": {
            "type": "TypeBool",
            "optional": true,
            "description": "Allows or disallows snapshot of a volume when the volume is attached to an instance."
          },
          "metadata": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of key-value metadata of the volume.",
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the snapshot."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "computed": true,
            "force_new": true
          },
          "volume_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the volume to create snapshot for. Changing this creates a new snapshot.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 30
        },
        "description": "Provides a blockstorage snapshot resource. This can be used to create, modify and delete blockstorage snapshot."
      },
      "vkcs_blockstorage_volume": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the availability zone of the volume."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The description of the volume."
          },
          "image_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the image to create volume with. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.",
            "force_new": true
          },
          "metadata": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of key-value metadata of the volume.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the volume."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region to create resource in.",
            "computed": true,
            "force_new": true
          },
          "size": {
            "type": "TypeInt",
            "required": true,
            "description": "The size of the volume."
          },
          "snapshot_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the snapshot of volume. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.",
            "force_new": true
          },
          "source_vol_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the source volume. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.",
            "force_new": true
          },
          "volume_type": {
            "type": "TypeString",
            "required": true,
            "description": "The type of the volume."
          }
        },
        "timeouts": {
          "create": 30
        },
        "description": "Provides a blockstorage volume resource. This can be used to create, modify and delete blockstorage volume."
      },
      "vkcs_compute_floatingip_associate": {
        "schema": {
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The specific IP address to direct traffic to.",
            "force_new": true
          },
          "floating_ip": {
            "type": "TypeString",
            "required": true,
            "description": "The floating IP to associate.",
            "force_new": true
          },
          "instance_id": {
            "type": "TypeString",
            "required": true,
            "description": "The instance to associate the floating IP with.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the `region` argument of the provider is used. Changing this creates a new floatingip_associate.",
            "computed": true,
            "force_new": true
          },
          "wait_until_associated": {
            "type": "TypeBool",
            "optional": true,
            "description": "In cases where the VKCS environment does not automatically wait until the association has finished, set this option to have Terraform poll the instance until the floating IP has been associated. Defaults to false.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10
        },
        "description": "Associate a floating IP to an instance."
      },
      "vkcs_compute_instance": {
        "schema": {
          "access_ip_v4": {
            "type": "TypeString",
            "optional": true,
            "description": "The first detected Fixed IPv4 address.",
            "computed": true
          },
          "admin_pass": {
            "type": "TypeString",
            "optional": true,
            "description": "The administrative password to assign to the server. Changing this changes the root password on the existing server."
          },
          "all_metadata": {
            "type": "TypeMap",
            "description": "Contains all instance metadata, even metadata not set by Terraform.",
            "computed": true
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of tags assigned on the instance, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The availability zone in which to create the server. Conflicts with `availability_zone_hints`. Changing this creates a new server.",
            "computed": true,
            "force_new": true
          },
          "block_device": {
            "type": "TypeList",
            "optional": true,
            "description": "Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html) for more information.",
            "computed": true,
            "elem": {
              "schema": {
                "boot_index": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The boot index of the volume. It defaults to 0 if only one `block_device` is specified, and to -1 if more than one is configured. Changing this creates a new server. _note_ You must set the boot index to 0 for one of the block devices if more than one is defined.",
                  "computed": true,
                  "force_new": true
                },
                "delete_on_termination": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": false,
                  "description": "Delete the volume / block device upon termination of the instance. Defaults to false. Changing this creates a new server. __note__ It is important to enable `delete_on_termination` for volumes created with instance. If `delete_on_termination` is disabled for such volumes, then after instance deletion such volumes will stay orphaned and uncontrolled by terraform. __note__ It is important to disable `delete_on_termination` if volume is created as separate terraform resource and is attached to instance. Enabling `delete_on_termination` for such volumes will result in mismanagement between two terraform resources in case of instance deletion",
                  "force_new": true
                },
                "destination_type": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The type that gets created. Possible values are \"volume\" and \"local\". Changing this creates a new server.",
                  "force_new": true
                },
                "device_type": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The low-level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.",
                  "force_new": true
                },
                "disk_bus": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The low-level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.",
                  "force_new": true
                },
                "guest_format": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "Specifies the guest server disk file system format, such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.",
                  "force_new": true
                },
                "source_type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The source type of the device. Must be one of \"blank\", \"image\", \"volume\", or \"snapshot\". Changing this creates a new server.",
                  "force_new": true
                },
                "uuid": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The UUID of the image, volume, or snapshot. Optional if `source_type` is set to `\"blank\"`. Changing this creates a new server.",
                  "force_new": true
                },
                "volume_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.",
                  "force_new": true
                },
                "volume_type": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The volume type that will be used. Changing this creates a new server.",
                  "force_new": true
                }
              }
            }
          },
          "config_drive": {
            "type": "TypeBool",
            "optional": true,
            "description": "Whether to use the config_drive feature to configure the instance. Changing this creates a new server.",
            "force_new": true
          },
          "flavor_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The flavor ID of the desired flavor for the server. Required if `flavor_name` is empty. Changing this resizes the existing server.",
            "computed": true
          },
          "flavor_name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the desired flavor for the server. Required if `flavor_id` is empty. Changing this resizes the existing server.",
            "computed": true
          },
          "force_delete": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled."
          },
          "image_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The image ID of the desired image for the server. Required if `image_name` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.",
            "computed": true,
            "force_new": true
          },
          "image_name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the desired image for the server. Required if `image_id` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.",
            "computed": true,
            "force_new": true
          },
          "key_pair": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.",
            "force_new": true
          },
          "metadata": {
            "type": "TypeMap",
            "optional": true,
            "description": "Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata."
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "A unique name for the resource."
          },
          "network": {
            "type": "TypeList",
            "optional": true,
            "description": "An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.",
            "computed": true,
            "force_new": true,
            "elem": {
              "schema": {
                "access_network": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": false,
                  "description": "Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false."
                },
                "fixed_ip_v4": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.",
                  "computed": true,
                  "force_new": true
                },
                "mac": {
                  "type": "TypeString",
                  "description": "The MAC address of the NIC on that network.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The human-readable name of the network. Optional if `uuid` or `port` is provided. Changing this creates a new server.",
                  "computed": true,
                  "force_new": true
                },
                "port": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The port UUID of a network to attach to the server. Optional if `uuid` or `name` is provided. Changing this creates a new server. _note_ If port is used, only its security groups will be applied instead of security_groups instance argument.",
                  "computed": true,
                  "force_new": true
                },
                "uuid": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The network UUID to attach to the server. Optional if `port` or `name` is provided. Changing this creates a new server.",
                  "computed": true,
                  "force_new": true
                }
              }
            }
          },
          "network_mode": {
            "type": "TypeString",
            "optional": true,
            "description": "Special string for `network` option to create the server. `network_mode` can be `\"auto\"` or `\"none\"`. Please see the following [reference](https://docs.openstack.org/api-ref/compute/?expanded=create-server-detail#id11) for more information. Conflicts with `network`.",
            "force_new": true
          },
          "personality": {
            "type": "TypeSet",
            "optional": true,
            "description": "Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. _note_ 'config_drive' must be enabled.",
            "force_new": true,
            "elem": {
              "schema": {
                "content": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The contents of the file. Limited to 255 bytes."
                },
                "file": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The absolute path of the destination file."
                }
              }
            }
          },
          "power_state": {
            "type": "TypeString",
            "optional": true,
            "default": "active",
            "description": "Provide the VM state. Only 'active' and 'shutoff' are supported values. _note_ If the initial power_state is the shutoff the VM will be stopped immediately after build and the provisioners like remote-exec or files are not supported."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to create the server instance. If omitted, the `region` argument of the provider is used. Changing this creates a new server.",
            "computed": true,
            "force_new": true
          },
          "scheduler_hints": {
            "type": "TypeSet",
            "optional": true,
            "description": "Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.",
            "elem": {
              "schema": {
                "group": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "A UUID of a Server Group. The instance will be placed into that group.",
                  "force_new": true
                }
              }
            }
          },
          "security_groups": {
            "type": "TypeSet",
            "optional": true,
            "description": "An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. _note_ When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. _note_ Names should be used and not ids, as ids trigger unnecessary updates.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "stop_before_destroy": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway."
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the instance. Changing this updates the existing instance tags.",
            "elem": {
              "type": "TypeString"
            }
          },
          "user_data": {
            "type": "TypeString",
            "optional": true,
            "description": "The user data to provide when launching the instance.\tChanging this creates a new server.",
            "force_new": true
          },
          "vendor_options": {
            "type": "TypeSet",
            "optional": true,
            "description": "Map of additional vendor-specific options. Supported options are described below.",
            "elem": {
              "schema": {
                "detach_ports_before_destroy": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": false,
                  "description": "Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted."
                },
                "ignore_resize_confirmation": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": false,
                  "description": "Boolean to control whether to ignore manual confirmation of the instance resizing."
                }
              }
            },
            "max_items": 1,
            "min_items": 1
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30,
          "update": 30
        },
        "description": "Manages a compute VM instance resource.\n\n~\u003e **Note:** All arguments including the instance admin password will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/language/state/sensitive-data.html)."
      },
      "vkcs_compute_interface_attach": {
        "schema": {
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "An IP address to assosciate with the port. _note_ This option cannot be used with port_id. You must specify a network_id. The IP address must lie in a range on the supplied network.",
            "computed": true,
            "force_new": true
          },
          "instance_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the Instance to attach the Port or Network to.",
            "force_new": true
          },
          "network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the Network to attach to an Instance. A port will be created automatically. _note_ This option and `port_id` are mutually exclusive.",
            "computed": true,
            "force_new": true
          },
          "port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the Port to attach to an Instance. _note_ This option and `network_id` are mutually exclusive.",
            "computed": true,
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to create the interface attachment. If omitted, the `region` argument of the provider is used. Changing this creates a new attachment.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Attaches a Network Interface (a Port) to an Instance using the VKCS Compute API."
      },
      "vkcs_compute_keypair": {
        "schema": {
          "fingerprint": {
            "type": "TypeString",
            "description": "The fingerprint of the public key.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "A unique name for the keypair. Changing this creates a new keypair.",
            "force_new": true
          },
          "private_key": {
            "type": "TypeString",
            "description": "The generated private key when no public key is specified.",
            "computed": true
          },
          "public_key": {
            "type": "TypeString",
            "optional": true,
            "description": "A pregenerated OpenSSH-formatted public key. Changing this creates a new keypair. If a public key is not specified, then a public/private key pair will be automatically generated. If a pair is created, then destroying this resource means you will lose access to that keypair forever.",
            "computed": true,
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the `region` argument of the provider is used. Changing this creates a new keypair.",
            "computed": true,
            "force_new": true
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          }
        },
        "description": "Manages a keypair resource within VKCS.\n\n~\u003e **Important Security Notice** The private key generated by this resource will be stored *unencrypted* in your Terraform state file. **Use of this resource for production deployments is *not* recommended**. Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run."
      },
      "vkcs_compute_servergroup": {
        "schema": {
          "members": {
            "type": "TypeList",
            "description": "The instances that are part of this server group.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "A unique name for the server group. Changing this creates a new server group.",
            "force_new": true
          },
          "policies": {
            "type": "TypeList",
            "optional": true,
            "description": "The set of policies for the server group. All policies are mutually exclusive. See the Policies section for more information. Changing this creates a new server group.",
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. If omitted, the `region` argument of the provider is used. Changing this creates a new server group.",
            "computed": true,
            "force_new": true
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          }
        },
        "description": "Manages a Server Group resource within VKCS."
      },
      "vkcs_compute_volume_attach": {
        "schema": {
          "instance_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the Instance to attach the Volume to.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. A Compute client is needed to create a volume attachment. If omitted, the `region` argument of the provider is used. Changing this creates a new volume attachment.",
            "computed": true,
            "force_new": true
          },
          "volume_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the Volume to attach to an Instance.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Attaches a Block Storage Volume to an Instance using the VKCS Compute API."
      },
      "vkcs_db_backup": {
        "schema": {
          "container_prefix": {
            "type": "TypeString",
            "optional": true,
            "description": "Prefix of S3 bucket ([prefix] - [project_id]) to store backup data. Default: databasebackups"
          },
          "created": {
            "type": "TypeString",
            "description": "Backup creation timestamp",
            "computed": true
          },
          "datastore": {
            "type": "TypeList",
            "description": "Object that represents datastore of backup",
            "computed": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "description": "Version of the datastore. Changing this creates a new instance.",
                  "computed": true
                },
                "version": {
                  "type": "TypeString",
                  "description": "Type of the datastore. Changing this creates a new instance.",
                  "computed": true
                }
              }
            }
          },
          "dbms_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the instance or cluster, to create backup of."
          },
          "dbms_type": {
            "type": "TypeString",
            "description": "Type of dbms for the backup, can be \"instance\" or \"cluster\".",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The description of the backup",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "location_ref": {
            "type": "TypeString",
            "description": "Location of backup data on backup storage",
            "computed": true
          },
          "meta": {
            "type": "TypeString",
            "description": "Metadata of the backup",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the backup. Changing this creates a new backup"
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "new_since": "v0.4.0"
          },
          "size": {
            "type": "TypeFloat",
            "description": "Backup's volume size",
            "computed": true
          },
          "timeouts": {
            "type": "TypeList",
            "elem": {
              "schema": {
                "create": {
                  "type": "TypeString",
                  "optional": true
                },
                "delete": {
                  "type": "TypeString",
                  "optional": true
                }
              }
            },
            "max_items": 1
          },
          "updated": {
            "type": "TypeString",
            "description": "Timestamp of backup's last update",
            "computed": true
          },
          "wal_size": {
            "type": "TypeFloat",
            "description": "Backup's WAL volume size",
            "computed": true
          }
        },
        "description": "Provides a db backup resource. This can be used to create and delete db backup.",
        "new_since": "v0.1.4"
      },
      "vkcs_db_cluster": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the availability zone of the cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "backup_schedule": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents configuration of PITR backup. This functionality is available only for postgres datastore.",
            "elem": {
              "schema": {
                "interval_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Time interval between backups, specified in hours. Available values: 3, 6, 8, 12, 24."
                },
                "keep_count": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Number of backups to be stored."
                },
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Name of the schedule."
                },
                "start_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Hours part of timestamp of initial backup."
                },
                "start_minutes": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Minutes part of timestamp of initial backup."
                }
              }
            },
            "max_items": 1,
            "new_since": "v0.1.4"
          },
          "capabilities": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents capability applied to cluster. There can be several instances of this object.",
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The name of the capability to apply."
                },
                "settings": {
                  "type": "TypeMap",
                  "optional": true,
                  "description": "Map of key-value settings of the capability.",
                  "elem": {
                    "type": "TypeString"
                  }
                }
              }
            }
          },
          "cloud_monitoring_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable cloud monitoring for the cluster. Changing this for Redis or MongoDB creates a new instance.",
            "new_since": "v0.2.0"
          },
          "cluster_size": {
            "type": "TypeInt",
            "required": true,
            "description": "The number of instances in the cluster."
          },
          "configuration_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The id of the configuration attached to cluster."
          },
          "datastore": {
            "type": "TypeList",
            "required": true,
            "description": "Object that represents datastore of the cluster. Changing this creates a new cluster.",
            "force_new": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore. Changing this creates a new cluster. Type of the datastore can either be \"galera_mysql\", \"postgresql\" or \"tarantool\".",
                  "force_new": true
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore. Changing this creates a new cluster.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          },
          "disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of the cluster.",
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for autoresize."
                }
              }
            },
            "max_items": 1
          },
          "flavor_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of flavor for the cluster."
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Indicates whether floating ip is created for cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "instances": {
            "type": "TypeList",
            "description": "Cluster instances info.",
            "computed": true,
            "elem": {
              "schema": {
                "instance_id": {
                  "type": "TypeString",
                  "description": "The id of the instance.",
                  "computed": true
                },
                "ip": {
                  "type": "TypeList",
                  "description": "IP address of the instance.",
                  "computed": true,
                  "elem": {
                    "type": "TypeString"
                  }
                },
                "role": {
                  "type": "TypeString",
                  "description": "The role of the instance in cluster.",
                  "computed": true
                }
              }
            }
          },
          "keypair": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the keypair to be attached to cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "loadbalancer_id": {
            "type": "TypeString",
            "description": "The id of the loadbalancer attached to the cluster.",
            "computed": true,
            "new_since": "v0.1.15"
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "network": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents network of the cluster. Changing this creates a new cluster.",
            "force_new": true,
            "elem": {
              "schema": {
                "port": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The port id of the network. Changing this creates a new cluster.",
                  "force_new": true,
                  "deprecated": "This argument is deprecated, please do not use it."
                },
                "security_groups": {
                  "type": "TypeSet",
                  "optional": true,
                  "description": "An array of one or more security group IDs to associate with the cluster instances. Changing this creates a new cluster.",
                  "force_new": true,
                  "elem": {
                    "type": "TypeString"
                  },
                  "new_since": "v0.2.0"
                },
                "subnet_id": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The id of the subnet. Changing this creates a new cluster.",
                  "force_new": true,
                  "new_since": "v0.1.15"
                },
                "uuid": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The id of the network. Changing this creates a new cluster. _note_ Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.",
                  "force_new": true
                }
              }
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region to create resource in.",
            "computed": true,
            "force_new": true
          },
          "restore_point": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents backup to restore cluster from.",
            "force_new": true,
            "elem": {
              "schema": {
                "backup_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "ID of the backup.",
                  "force_new": true
                },
                "target": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "Used only for restoring from PITR backups. Timestamp of needed backup in format \"2021-10-06 01:02:00\". You can specify \"latest\" to use most recent backup.",
                  "force_new": true
                }
              }
            },
            "max_items": 1,
            "new_since": "v0.1.4"
          },
          "root_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Indicates whether root user is enabled for the cluster."
          },
          "root_password": {
            "type": "TypeString",
            "optional": true,
            "description": "Password for the root user of the cluster. When enabling root, password is autogenerated, use this field to obtain it.",
            "computed": true
          },
          "shrink_options": {
            "type": "TypeList",
            "optional": true,
            "description": "Used only for shrinking cluster. List of IDs of instances that should remain after shrink. If no options are supplied, shrink operation will choose first non-leader instance to delete.",
            "elem": {
              "type": "TypeString"
            }
          },
          "vendor_options": {
            "type": "TypeSet",
            "optional": true,
            "description": "Map of additional vendor-specific options. Supported options are described below.",
            "elem": {
              "schema": {
                "restart_confirmed": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Boolean to confirm autorestart of the cluster's instances if it is required to apply configuration group changes."
                }
              }
            },
            "max_items": 1,
            "min_items": 1,
            "new_since": "v0.4.0"
          },
          "volume_size": {
            "type": "TypeInt",
            "required": true,
            "description": "Size of the cluster instance volume."
          },
          "volume_type": {
            "type": "TypeString",
            "required": true,
            "description": "The type of the cluster instance volume. Changing this creates a new cluster."
          },
          "wal_disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of wal volume of the cluster.",
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether wal volume autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for wal volume autoresize."
                }
              }
            },
            "max_items": 1
          },
          "wal_volume": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents wal volume of the cluster. Changing this creates a new cluster.",
            "elem": {
              "schema": {
                "size": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Size of the instance wal volume."
                },
                "volume_type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The type of the cluster wal volume. Changing this creates a new cluster."
                }
              }
            }
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30
        },
        "description": "Provides a db cluster resource. This can be used to create, modify and delete db cluster for galera_mysql, postgresql, tarantool datastores."
      },
      "vkcs_db_cluster_with_shards": {
        "schema": {
          "capabilities": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents capability applied to cluster. There can be several instances of this object.",
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The name of the capability to apply."
                },
                "settings": {
                  "type": "TypeMap",
                  "optional": true,
                  "description": "Map of key-value settings of the capability.",
                  "elem": {
                    "type": "TypeString"
                  }
                }
              }
            }
          },
          "cloud_monitoring_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable cloud monitoring for the cluster. Changing this for Redis or MongoDB creates a new instance.",
            "new_since": "v0.2.0"
          },
          "configuration_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The id of the configuration attached to cluster."
          },
          "datastore": {
            "type": "TypeList",
            "required": true,
            "description": "Object that represents datastore of the cluster. Changing this creates a new cluster.",
            "force_new": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore. Changing this creates a new cluster. Type of the datastore must be \"clickhouse\".",
                  "force_new": true
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore. Changing this creates a new cluster.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          },
          "disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of the cluster.",
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for autoresize."
                }
              }
            },
            "max_items": 1
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Boolean field that indicates whether floating ip is created for cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "keypair": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the keypair to be attached to cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the cluster. Changing this creates a new cluster.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region to create resource in.",
            "computed": true,
            "force_new": true
          },
          "restore_point": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents backup to restore instance from.",
            "force_new": true,
            "elem": {
              "schema": {
                "backup_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "ID of the backup.",
                  "force_new": true
                }
              }
            },
            "max_items": 1,
            "new_since": "v0.1.4"
          },
          "root_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Indicates whether root user is enabled for the cluster."
          },
          "root_password": {
            "type": "TypeString",
            "optional": true,
            "description": "Password for the root user of the cluster. When enabling root, password is autogenerated, use this field to obtain it.",
            "computed": true
          },
          "shard": {
            "type": "TypeList",
            "required": true,
            "description": "Object that represents cluster shard. There can be several instances of this object.",
            "elem": {
              "schema": {
                "availability_zone": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The name of the availability zone of the cluster shard. Changing this creates a new cluster.",
                  "force_new": true
                },
                "flavor_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The ID of flavor for the cluster shard."
                },
                "instances": {
                  "type": "TypeList",
                  "description": "Shard instances info.",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "instance_id": {
                        "type": "TypeString",
                        "description": "The id of the instance.",
                        "computed": true
                      },
                      "ip": {
                        "type": "TypeList",
                        "description": "IP address of the instance.",
                        "computed": true,
                        "elem": {
                          "type": "TypeString"
                        }
                      }
                    }
                  },
                  "new_since": "v0.1.15"
                },
                "network": {
                  "type": "TypeList",
                  "optional": true,
                  "force_new": true,
                  "elem": {
                    "schema": {
                      "port": {
                        "type": "TypeString",
                        "optional": true,
                        "description": "The port id of the network. Changing this creates a new cluster.",
                        "force_new": true,
                        "deprecated": "This argument is deprecated, please do not use it."
                      },
                      "security_groups": {
                        "type": "TypeSet",
                        "optional": true,
                        "description": "An array of one or more security group IDs to associate with the shard instances. Changing this creates a new cluster.",
                        "force_new": true,
                        "elem": {
                          "type": "TypeString"
                        },
                        "new_since": "v0.2.0"
                      },
                      "subnet_id": {
                        "type": "TypeString",
                        "optional": true,
                        "description": "The id of the subnet. Changing this creates a new cluster.",
                        "force_new": true,
                        "new_since": "v0.1.15"
                      },
                      "uuid": {
                        "type": "TypeString",
                        "optional": true,
                        "description": "The id of the network. Changing this creates a new cluster. _note_ Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.",
                        "force_new": true
                      }
                    },
                    "description": "Object that represents network of the cluster shard. Changing this creates a new cluster."
                  }
                },
                "shard_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The ID of the shard. Changing this creates a new cluster.",
                  "force_new": true
                },
                "shrink_options": {
                  "type": "TypeList",
                  "optional": true,
                  "description": "Used only for shrinking cluster. List of IDs of instances that should remain after shrink. If no options are supplied, shrink operation will choose first non-leader instance to delete.",
                  "elem": {
                    "type": "TypeString"
                  }
                },
                "size": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "The number of instances in the cluster shard."
                },
                "volume_size": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Size of the cluster shard instance volume."
                },
                "volume_type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The type of the cluster shard instance volume."
                },
                "wal_volume": {
                  "type": "TypeList",
                  "optional": true,
                  "description": "Object that represents wal volume of the cluster.",
                  "elem": {
                    "schema": {
                      "size": {
                        "type": "TypeInt",
                        "required": true,
                        "description": "Size of the instance wal volume."
                      },
                      "volume_type": {
                        "type": "TypeString",
                        "required": true,
                        "description": "The type of the cluster wal volume."
                      }
                    }
                  }
                }
              }
            }
          },
          "vendor_options": {
            "type": "TypeSet",
            "optional": true,
            "description": "Map of additional vendor-specific options. Supported options are described below.",
            "elem": {
              "schema": {
                "restart_confirmed": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Boolean to confirm autorestart of the cluster's instances if it is required to apply configuration group changes."
                }
              }
            },
            "max_items": 1,
            "min_items": 1,
            "new_since": "v0.4.0"
          },
          "wal_disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of wal volume of the cluster.",
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether wal volume autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for wal volume autoresize."
                }
              }
            },
            "max_items": 1
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30
        },
        "description": "Provides a db cluster with shards resource. This can be used to create, modify and delete db cluster with shards for clickhouse datastore."
      },
      "vkcs_db_config_group": {
        "schema": {
          "created": {
            "type": "TypeString",
            "description": "Timestamp of config group's creation",
            "computed": true
          },
          "datastore": {
            "type": "TypeList",
            "required": true,
            "description": "Object that represents datastore of the config group. Changing this creates a new config group.",
            "force_new": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore.",
                  "force_new": true
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The description of the config group."
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the config group."
          },
          "updated": {
            "type": "TypeString",
            "description": "Timestamp of config group's last update",
            "computed": true
          },
          "values": {
            "type": "TypeMap",
            "required": true,
            "description": "Map of configuration parameters in format \"key\": \"value\".",
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "Provides a db config group resource. This can be used to create, update and delete db config group.",
        "new_since": "v0.1.7"
      },
      "vkcs_db_database": {
        "schema": {
          "charset": {
            "type": "TypeString",
            "optional": true,
            "description": "Type of charset used for the database. Changing this creates a new database.",
            "force_new": true
          },
          "collate": {
            "type": "TypeString",
            "optional": true,
            "description": "Collate option of the database.  Changing this creates a new database.",
            "force_new": true
          },
          "dbms_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the instance or cluster that database is created for.",
            "force_new": true
          },
          "dbms_type": {
            "type": "TypeString",
            "description": "Type of dbms for the database, can be \"instance\" or \"cluster\".",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the database. Changing this creates a new database.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Provides a db database resource. This can be used to create, modify and delete db databases."
      },
      "vkcs_db_instance": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the availability zone of the instance. Changing this creates a new instance.",
            "force_new": true
          },
          "backup_schedule": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents configuration of PITR backup. This functionality is available only for postgres datastore.",
            "elem": {
              "schema": {
                "interval_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Time interval between backups, specified in hours. Available values: 3, 6, 8, 12, 24."
                },
                "keep_count": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Number of backups to be stored."
                },
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Name of the schedule."
                },
                "start_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Hours part of timestamp of initial backup."
                },
                "start_minutes": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Minutes part of timestamp of initial backup."
                }
              }
            },
            "max_items": 1,
            "new_since": "v0.1.4"
          },
          "capabilities": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents capability applied to instance. There can be several instances of this object (see example).",
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The name of the capability to apply."
                },
                "settings": {
                  "type": "TypeMap",
                  "optional": true,
                  "description": "Map of key-value settings of the capability.",
                  "elem": {
                    "type": "TypeString"
                  }
                }
              }
            }
          },
          "cloud_monitoring_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable cloud monitoring for the instance. Changing this for Redis or MongoDB creates a new instance.",
            "new_since": "v0.2.0"
          },
          "configuration_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The id of the configuration attached to instance."
          },
          "datastore": {
            "type": "TypeList",
            "required": true,
            "description": "Object that represents datastore of the instance. Changing this creates a new instance.",
            "force_new": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore. Changing this creates a new instance.",
                  "force_new": true
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore. Changing this creates a new instance.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          },
          "disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of the instance.",
            "computed": true,
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for autoresize."
                }
              }
            },
            "max_items": 1
          },
          "flavor_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of flavor for the instance."
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Indicates whether floating ip is created for instance. Changing this creates a new instance.",
            "force_new": true
          },
          "ip": {
            "type": "TypeList",
            "description": "IP address of the instance.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "keypair": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the keypair to be attached to instance. Changing this creates a new instance.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the instance. Changing this creates a new instance",
            "force_new": true
          },
          "network": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents network of the instance. Changing this creates a new instance.",
            "force_new": true,
            "elem": {
              "schema": {
                "fixed_ip_v4": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The IPv4 address. Changing this creates a new instance. _note_ This argument conflicts with \"replica_of\". Setting both at the same time causes \"fixed_ip_v4\" to be ignored.",
                  "force_new": true
                },
                "port": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The port id of the network. Changing this creates a new instance.",
                  "force_new": true,
                  "deprecated": "This argument is deprecated, please do not use it."
                },
                "security_groups": {
                  "type": "TypeSet",
                  "optional": true,
                  "description": "An array of one or more security group IDs to associate with the instance. Changing this creates a new instance.",
                  "force_new": true,
                  "elem": {
                    "type": "TypeString"
                  },
                  "new_since": "v0.2.0"
                },
                "subnet_id": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The id of the subnet. Changing this creates a new instance.",
                  "force_new": true,
                  "new_since": "v0.1.15"
                },
                "uuid": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The id of the network. Changing this creates a new instance. _note_ Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.",
                  "force_new": true
                }
              }
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region to create resource in.",
            "computed": true,
            "force_new": true
          },
          "replica_of": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the instance, that current instance is replica of."
          },
          "restore_point": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents backup to restore instance from.",
            "force_new": true,
            "elem": {
              "schema": {
                "backup_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "ID of the backup.",
                  "force_new": true
                },
                "target": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "Used only for restoring from postgresql PITR backups. Timestamp of needed backup in format \"2021-10-06 01:02:00\". You can specify \"latest\" to use most recent backup.",
                  "force_new": true
                }
              }
            },
            "max_items": 1,
            "new_since": "v0.1.4"
          },
          "root_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Indicates whether root user is enabled for the instance."
          },
          "root_password": {
            "type": "TypeString",
            "optional": true,
            "description": "Password for the root user of the instance. If this field is empty and root user is enabled, then after creation of the instance this field will contain auto-generated root user password.",
            "computed": true
          },
          "size": {
            "type": "TypeInt",
            "required": true,
            "description": "Size of the instance volume."
          },
          "vendor_options": {
            "type": "TypeSet",
            "optional": true,
            "description": "Map of additional vendor-specific options. Supported options are described below.",
            "elem": {
              "schema": {
                "restart_confirmed": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Boolean to confirm autorestart of the instance if it is required to apply configuration group changes."
                }
              }
            },
            "max_items": 1,
            "min_items": 1,
            "new_since": "v0.4.0"
          },
          "volume_type": {
            "type": "TypeString",
            "required": true,
            "description": "The type of the instance volume. Changing this creates a new instance.",
            "force_new": true
          },
          "wal_disk_autoexpand": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents autoresize properties of the instance wal volume.",
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether wal volume autoresize is enabled."
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for wal volume autoresize."
                }
              }
            },
            "max_items": 1
          },
          "wal_volume": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents wal volume of the instance. Changing this creates a new instance.",
            "force_new": true,
            "elem": {
              "schema": {
                "autoexpand": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "Indicates whether wal volume autoresize is enabled.",
                  "deprecated": "Please, use wal_disk_autoexpand block instead"
                },
                "max_disk_size": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "Maximum disk size for wal volume autoresize.",
                  "deprecated": "Please, use wal_disk_autoexpand block instead"
                },
                "size": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Size of the instance wal volume."
                },
                "volume_type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The type of the instance wal volume.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30
        },
        "description": "Provides a db instance resource. This can be used to create, modify and delete db instance."
      },
      "vkcs_db_user": {
        "schema": {
          "databases": {
            "type": "TypeList",
            "optional": true,
            "description": "List of names of the databases, that user is created for.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "dbms_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the instance or cluster that user is created for.",
            "force_new": true
          },
          "dbms_type": {
            "type": "TypeString",
            "description": "Type of dbms for the user, can be \"instance\" or \"cluster\".",
            "computed": true
          },
          "host": {
            "type": "TypeString",
            "optional": true,
            "description": "IP address of the host that user will be accessible from."
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the user. Changing this creates a new user."
          },
          "password": {
            "type": "TypeString",
            "required": true,
            "description": "The password of the user."
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Provides a db user resource. This can be used to create, modify and delete db user."
      },
      "vkcs_dc_bgp_instance": {
        "schema": {
          "asn": {
            "type": "TypeInt",
            "required": true,
            "description": "BGP Autonomous System Number (integer representation supports only). Changing this creates a new resource"
          },
          "bgp_router_id": {
            "type": "TypeString",
            "required": true,
            "description": "BGP Router ID (IP address that represent BGP router in BGP network). Changing this creates a new resource"
          },
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_router_id": {
            "type": "TypeString",
            "required": true,
            "description": "Direct Connect Router ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the router",
            "computed": true
          },
          "ecmp_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable BGP ECMP behaviour on router. Default is false",
            "computed": true
          },
          "enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable or disable item. Default is true",
            "computed": true
          },
          "graceful_restart": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable BGP Graceful Restart feature. Default is false",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "long_lived_graceful_restart": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable BGP Long Lived Graceful Restart feature. Default is false",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the router",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect BGP instance resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_bgp_neighbor": {
        "schema": {
          "add_paths": {
            "type": "TypeString",
            "optional": true,
            "description": "Activate BGP Add-Paths feature on peer. Default is off",
            "computed": true
          },
          "bfd_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Control BGP session activity with BFD protocol. Default is false",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_bgp_id": {
            "type": "TypeString",
            "required": true,
            "description": "Direct Connect BGP ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the BGP neighbor",
            "computed": true
          },
          "enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable or disable item. Default is true",
            "computed": true
          },
          "filter_in": {
            "type": "TypeString",
            "optional": true,
            "description": "Input filter that pass incoming BGP prefixes (allow any)",
            "computed": true
          },
          "filter_out": {
            "type": "TypeString",
            "optional": true,
            "description": "Output filter that pass incoming BGP prefixes (allow any)",
            "computed": true
          },
          "force_ibgp_next_hop_self": {
            "type": "TypeBool",
            "optional": true,
            "description": "Force set IP address of next-hop on BGP prefix to self even in iBGP. Default is false",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the BGP neighbor",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "remote_asn": {
            "type": "TypeInt",
            "required": true,
            "description": "BGP Neighbor ASN. Changing this creates a new resource"
          },
          "remote_ip": {
            "type": "TypeString",
            "required": true,
            "description": "BGP Neighbor IP address. Changing this creates a new resource"
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect BGP neighbor resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_bgp_static_announce": {
        "schema": {
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_bgp_id": {
            "type": "TypeString",
            "required": true,
            "description": "Direct Connect BGP ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the BGP neighbor",
            "computed": true
          },
          "enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable or disable item. Default is true",
            "computed": true
          },
          "gateway": {
            "type": "TypeString",
            "required": true,
            "description": "IP address of gateway. Changing this creates a new resource"
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the BGP neighbor",
            "computed": true
          },
          "network": {
            "type": "TypeString",
            "required": true,
            "description": "Subnet in CIDR notation. Changing this creates a new resource"
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect BGP Static Announce resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_interface": {
        "schema": {
          "bgp_announce_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable BGP announce of subnet attached to interface. Default is true",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_router_id": {
            "type": "TypeString",
            "required": true,
            "description": "Direct Connect Router ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the interface",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "ip_address": {
            "type": "TypeString",
            "optional": true,
            "description": "IP Address of the interface. Changing this creates a new resource",
            "computed": true
          },
          "ip_netmask": {
            "type": "TypeInt",
            "description": "IP Netmask",
            "computed": true
          },
          "mac_address": {
            "type": "TypeString",
            "description": "MAC Address of created interface",
            "computed": true
          },
          "mtu": {
            "type": "TypeInt",
            "description": "MTU",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the interface",
            "computed": true
          },
          "network_id": {
            "type": "TypeString",
            "required": true,
            "description": "Network ID to attach. Changing this creates a new resource"
          },
          "port_id": {
            "type": "TypeString",
            "description": "Port ID",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "sdn": {
            "type": "TypeString",
            "description": "SDN where interface was created",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "Subnet ID to attach. Changing this creates a new resource",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect interface resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_router": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The availability zone in which to create the router. Changing this creates a new router",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the router",
            "computed": true
          },
          "flavor": {
            "type": "TypeString",
            "optional": true,
            "description": "Flavor of the router. Possible values can be obtained with vkcs_dc_api_options data source. Changing this creates a new router. _note_ Not to be confused with compute service flavors.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the router",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect router resource. \u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_static_route": {
        "schema": {
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_router_id": {
            "type": "TypeString",
            "required": true,
            "description": "Direct Connect Router ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the static route",
            "computed": true
          },
          "gateway": {
            "type": "TypeString",
            "required": true,
            "description": "IP address of gateway. Changing this creates a new resource"
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "metric": {
            "type": "TypeInt",
            "optional": true,
            "description": "Metric to use for route. Default is 1",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the static route",
            "computed": true
          },
          "network": {
            "type": "TypeString",
            "required": true,
            "description": "Subnet in CIDR notation. Changing this creates a new resource"
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect BGP Static Announce resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_vrrp": {
        "schema": {
          "advert_interval": {
            "type": "TypeInt",
            "optional": true,
            "description": "VRRP Advertise interval. Default is 1",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the VRRP",
            "computed": true
          },
          "enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Enable or disable item. Default is true",
            "computed": true
          },
          "group_id": {
            "type": "TypeInt",
            "required": true,
            "description": "VRRP Group ID"
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the VRRP",
            "computed": true
          },
          "network_id": {
            "type": "TypeString",
            "required": true,
            "description": "Network ID to attach. Changing this creates a new resource"
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "sdn": {
            "type": "TypeString",
            "description": "SDN of created VRRP",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "Subnet ID to attach. Changing this creates a new resource",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect VRRP resource._note_ This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_vrrp_address": {
        "schema": {
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_vrrp_id": {
            "type": "TypeString",
            "required": true,
            "description": "VRRP ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the VRRP",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "ip_address": {
            "type": "TypeString",
            "optional": true,
            "description": "IP address to assign. Changing this creates a new resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the VRRP",
            "computed": true
          },
          "port_id": {
            "type": "TypeString",
            "description": "Port ID used to assign IP address",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect VRRP address resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_dc_vrrp_interface": {
        "schema": {
          "created_at": {
            "type": "TypeString",
            "description": "Creation timestamp",
            "computed": true
          },
          "dc_interface_id": {
            "type": "TypeString",
            "required": true,
            "description": "DC Interface ID to attach. Changing this creates a new resource"
          },
          "dc_vrrp_id": {
            "type": "TypeString",
            "required": true,
            "description": "VRRP ID to attach. Changing this creates a new resource"
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Description of the VRRP",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "master": {
            "type": "TypeBool",
            "optional": true,
            "description": "Start VRRP instance on interface as VRRP Master. Default is false",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the VRRP",
            "computed": true
          },
          "preempt": {
            "type": "TypeBool",
            "optional": true,
            "description": "VRRP interface preempt behavior. Default is true",
            "computed": true
          },
          "priority": {
            "type": "TypeInt",
            "optional": true,
            "description": "VRRP interface priority. Default is 100",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "Update timestamp",
            "computed": true
          }
        },
        "description": "Manages a direct connect VRRP interface resource.\u003cbr\u003e ~\u003e **Note:** This resource requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_images_image": {
        "schema": {
          "archiving_format": {
            "type": "TypeString",
            "optional": true,
            "description": "The format of archived image file. Use this to unzip image file when downloading an archive. Currently only \"tar\" format is supported.",
            "force_new": true,
            "new_since": "v0.4.2"
          },
          "checksum": {
            "type": "TypeString",
            "description": "The checksum of the data associated with the image.",
            "computed": true
          },
          "compression_format": {
            "type": "TypeString",
            "optional": true,
            "description": "The format of compressed image. Use this attribute to decompress image when downloading it from source. Must be one of \"auto\", \"bzip2\", \"gzip\", \"xz\". If set to \"auto\", response Content-Type header will be used to detect compression format.",
            "force_new": true,
            "new_since": "v0.4.2"
          },
          "container_format": {
            "type": "TypeString",
            "required": true,
            "description": "The container format. Must be one of \"bare\".",
            "force_new": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the image was created.",
            "computed": true
          },
          "disk_format": {
            "type": "TypeString",
            "required": true,
            "description": "The disk format. Must be one of \"raw\", \"iso\".",
            "force_new": true
          },
          "file": {
            "type": "TypeString",
            "description": "The trailing path after the image endpoint that represent the location of the image or the path to retrieve it.",
            "computed": true
          },
          "image_cache_path": {
            "type": "TypeString",
            "optional": true,
            "description": "This is the directory where the images will be downloaded. Images will be stored with a filename corresponding to the url's md5 hash. Defaults to \"$HOME/.terraform/image_cache\""
          },
          "image_source_password": {
            "type": "TypeString",
            "optional": true,
            "description": "The password of basic auth to download `image_source_url`."
          },
          "image_source_url": {
            "type": "TypeString",
            "optional": true,
            "description": "This is the url of the raw image. The image will be downloaded in the `image_cache_path` before being uploaded to VKCS. Conflicts with `local_file_path`.",
            "force_new": true
          },
          "image_source_username": {
            "type": "TypeString",
            "optional": true,
            "description": "The username of basic auth to download `image_source_url`."
          },
          "local_file_path": {
            "type": "TypeString",
            "optional": true,
            "description": "This is the filepath of the raw image file that will be uploaded to VKCS. Conflicts with `image_source_url`",
            "force_new": true
          },
          "metadata": {
            "type": "TypeMap",
            "description": "The metadata associated with the image. Image metadata allow for meaningfully define the image properties and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.",
            "computed": true
          },
          "min_disk_gb": {
            "type": "TypeInt",
            "optional": true,
            "default": 0,
            "description": "Amount of disk space (in GB) required to boot VM. Defaults to 0."
          },
          "min_ram_mb": {
            "type": "TypeInt",
            "optional": true,
            "default": 0,
            "description": "Amount of ram (in MB) required to boot VM. Defauts to 0."
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the image."
          },
          "owner": {
            "type": "TypeString",
            "description": "The id of the vkcs user who owns the image.",
            "computed": true
          },
          "properties": {
            "type": "TypeMap",
            "optional": true,
            "description": "A map of key/value pairs to set freeform information about an image. See the \"Notes\" section for further information about properties.",
            "computed": true
          },
          "protected": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "If true, image will not be deletable. Defaults to false."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Image client. An Image client is needed to create an Image that can be used with a compute instance. If omitted, the `region` argument of the provider is used. Changing this creates a new Image.",
            "computed": true,
            "force_new": true
          },
          "schema": {
            "type": "TypeString",
            "description": "The path to the JSON-schema that represent the image or image",
            "computed": true
          },
          "size_bytes": {
            "type": "TypeInt",
            "description": "The size in bytes of the data associated with the image.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the image. It can be \"queued\", \"active\" or \"saving\".",
            "computed": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The tags of the image. It must be a list of strings. At this time, it is not possible to delete all tags of an image.",
            "elem": {
              "type": "TypeString"
            }
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the image was last updated.",
            "computed": true
          },
          "verify_checksum": {
            "type": "TypeBool",
            "optional": true,
            "description": "If false, the checksum will not be verified once the image is finished uploading."
          },
          "visibility": {
            "type": "TypeString",
            "optional": true,
            "default": "private",
            "description": "The visibility of the image. Must be one of \"private\", \"community\", or \"shared\". The ability to set the visibility depends upon the configuration of the VKCS cloud."
          }
        },
        "timeouts": {
          "create": 30
        },
        "description": "Manages an Image resource within VKCS.\n\n~\u003e **Note:** All arguments including the source image URL password will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/language/state/sensitive-data.html)."
      },
      "vkcs_keymanager_container": {
        "schema": {
          "acl": {
            "type": "TypeList",
            "optional": true,
            "description": "Allows to control an access to a container. Currently only the `read` operation is supported. If not specified, the container is accessible project wide. The `read` structure is described below.",
            "computed": true,
            "elem": {
              "schema": {
                "read": {
                  "type": "TypeList",
                  "optional": true,
                  "description": "Block that describes read operation.",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "created_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was created.",
                        "computed": true
                      },
                      "project_access": {
                        "type": "TypeBool",
                        "optional": true,
                        "default": true,
                        "description": "Whether the container is accessible project wide. Defaults to `true`."
                      },
                      "updated_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was last updated.",
                        "computed": true
                      },
                      "users": {
                        "type": "TypeSet",
                        "optional": true,
                        "description": "The list of user IDs, which are allowed to access the container, when `project_access` is set to `false`.",
                        "elem": {
                          "type": "TypeString"
                        }
                      }
                    }
                  },
                  "max_items": 1
                }
              }
            },
            "max_items": 1
          },
          "consumers": {
            "type": "TypeList",
            "description": "The list of the container consumers. The structure is described below.",
            "computed": true,
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The name of the consumer."
                },
                "url": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The consumer URL."
                }
              }
            }
          },
          "container_ref": {
            "type": "TypeString",
            "description": "The container reference / where to find the container.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the container ACL was created.",
            "computed": true
          },
          "creator_id": {
            "type": "TypeString",
            "description": "The creator of the container.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the Container. Does not have to be unique.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the KeyManager client. A KeyManager client is needed to create a container. If omitted, the `region` argument of the provider is used. Changing this creates a new container.",
            "computed": true,
            "force_new": true
          },
          "secret_refs": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of dictionaries containing references to secrets. The structure is described below.",
            "force_new": true,
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The name of the secret reference. The reference names must correspond the container type, more details are available [here](https://docs.openstack.org/barbican/stein/api/reference/containers.html)."
                },
                "secret_ref": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The secret reference / where to find the secret, URL."
                }
              }
            }
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the container.",
            "computed": true
          },
          "type": {
            "type": "TypeString",
            "required": true,
            "description": "Used to indicate the type of container. Must be one of `generic`, `rsa` or `certificate`.",
            "force_new": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the container ACL was last updated.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30,
          "update": 30
        },
        "description": "Manages a key container resource within VKCS."
      },
      "vkcs_keymanager_secret": {
        "schema": {
          "acl": {
            "type": "TypeList",
            "optional": true,
            "description": "Allows to control an access to a secret. Currently only the `read` operation is supported. If not specified, the secret is accessible project wide.",
            "computed": true,
            "elem": {
              "schema": {
                "read": {
                  "type": "TypeList",
                  "optional": true,
                  "description": "Block that describes read operation.",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "created_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was created.",
                        "computed": true
                      },
                      "project_access": {
                        "type": "TypeBool",
                        "optional": true,
                        "default": true,
                        "description": "Whether the container is accessible project wide. Defaults to `true`."
                      },
                      "updated_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was last updated.",
                        "computed": true
                      },
                      "users": {
                        "type": "TypeSet",
                        "optional": true,
                        "description": "The list of user IDs, which are allowed to access the container, when `project_access` is set to `false`.",
                        "elem": {
                          "type": "TypeString"
                        }
                      }
                    }
                  },
                  "max_items": 1
                }
              }
            },
            "max_items": 1
          },
          "algorithm": {
            "type": "TypeString",
            "optional": true,
            "description": "Metadata provided by a user or system for informational purposes.",
            "computed": true,
            "force_new": true
          },
          "all_metadata": {
            "type": "TypeMap",
            "description": "The map of metadata, assigned on the secret, which has been explicitly and implicitly added.",
            "computed": true
          },
          "bit_length": {
            "type": "TypeInt",
            "optional": true,
            "description": "Metadata provided by a user or system for informational purposes.",
            "computed": true,
            "force_new": true
          },
          "content_types": {
            "type": "TypeMap",
            "description": "The map of the content types, assigned on the secret.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the secret ACL was created.",
            "computed": true
          },
          "creator_id": {
            "type": "TypeString",
            "description": "The creator of the secret.",
            "computed": true
          },
          "expiration": {
            "type": "TypeString",
            "optional": true,
            "description": "The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.",
            "force_new": true
          },
          "metadata": {
            "type": "TypeMap",
            "optional": true,
            "description": "Additional Metadata for the secret."
          },
          "mode": {
            "type": "TypeString",
            "optional": true,
            "description": "Metadata provided by a user or system for informational purposes.",
            "computed": true,
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the Secret. Does not have to be unique.",
            "force_new": true
          },
          "payload": {
            "type": "TypeString",
            "optional": true,
            "description": "The secret's data to be stored. **payload\\_content\\_type** must also be supplied if **payload** is included.",
            "computed": true,
            "force_new": true
          },
          "payload_content_encoding": {
            "type": "TypeString",
            "optional": true,
            "description": "(required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.",
            "force_new": true
          },
          "payload_content_type": {
            "type": "TypeString",
            "optional": true,
            "description": "(required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the KeyManager client. A KeyManager client is needed to create a secret. If omitted, the `region` argument of the provider is used. Changing this creates a new V1 secret.",
            "computed": true,
            "force_new": true
          },
          "secret_ref": {
            "type": "TypeString",
            "description": "The secret reference / where to find the secret.",
            "computed": true
          },
          "secret_type": {
            "type": "TypeString",
            "optional": true,
            "description": "Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).",
            "computed": true,
            "force_new": true
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the secret.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the secret ACL was last updated.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 30,
          "delete": 30,
          "update": 30
        },
        "description": "Manages a key secret resource within VKCS.\n\n~\u003e **Important Security Notice** The payload of this resource will be stored *unencrypted* in your Terraform state file. **Use of this resource for production deployments is *not* recommended**. [Read more about sensitive data in state](https://www.terraform.io/docs/language/state/sensitive-data.html)."
      },
      "vkcs_kubernetes_addon": {
        "schema": {
          "addon_id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the addon. Changing this creates a new addon."
          },
          "cluster_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the kubernetes cluster. Changing this creates a new addon."
          },
          "configuration_values": {
            "type": "TypeString",
            "optional": true,
            "description": "Configuration code for the addon. Changing this creates a new addon.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the application. Changing this creates a new addon.",
            "computed": true
          },
          "namespace": {
            "type": "TypeString",
            "required": true,
            "description": "The namespace name where the addon will be installed."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Container Infra Addons client. If omitted, the `region` argument of the provider is used. Changing this creates a new addon.",
            "computed": true
          },
          "timeouts": {
            "optional": true
          }
        },
        "description": "Provides a kubernetes cluster addon resource. This can be used to create, modify and delete kubernetes cluster addons.",
        "new_since": "v0.3.0"
      },
      "vkcs_kubernetes_cluster": {
        "schema": {
          "all_labels": {
            "type": "TypeMap",
            "description": "The read-only map of all cluster labels.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            },
            "new_since": "v0.5.1"
          },
          "api_address": {
            "type": "TypeString",
            "description": "COE API address.",
            "computed": true,
            "force_new": true
          },
          "api_lb_fip": {
            "type": "TypeString",
            "optional": true,
            "description": "API LoadBalancer fip.",
            "computed": true,
            "force_new": true
          },
          "api_lb_vip": {
            "type": "TypeString",
            "optional": true,
            "description": "API LoadBalancer vip.",
            "computed": true,
            "force_new": true
          },
          "availability_zone": {
            "type": "TypeString",
            "required": true,
            "description": "Availability zone of the cluster.",
            "force_new": true
          },
          "cluster_template_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the Kubernetes cluster template. It can be obtained using the cluster_template data source."
          },
          "created_at": {
            "type": "TypeString",
            "description": "The time at which cluster was created.",
            "computed": true
          },
          "dns_domain": {
            "type": "TypeString",
            "optional": true,
            "description": "Custom DNS cluster domain. Changing this creates a new cluster.",
            "computed": true,
            "force_new": true
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "required": true,
            "description": "Floating ip is enabled.",
            "force_new": true
          },
          "ingress_floating_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "Floating IP created for ingress service.",
            "computed": true
          },
          "insecure_registries": {
            "type": "TypeList",
            "optional": true,
            "description": "Addresses of registries from which you can download images without checking certificates. Changing this creates a new cluster.",
            "computed": true,
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "keypair": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the Compute service SSH keypair. Changing this creates a new cluster.",
            "force_new": true
          },
          "labels": {
            "type": "TypeMap",
            "optional": true,
            "description": "The list of optional key value pairs representing additional properties of the cluster. _note_ Updating this attribute will not immediately apply the changes; these options will be used when recreating or deleting cluster nodes, for example, during an upgrade operation.\n\n  * `calico_ipv4pool` to set subnet where pods will be created. Default 10.100.0.0/16. _note_ Updating this value while the cluster is running is dangerous because it can lead to loss of connectivity of the cluster nodes.\n  * `clean_volumes` to remove pvc volumes when deleting a cluster. Default False. _note_ Changes to this value will be applied immediately.\n  * `cloud_monitoring` to enable cloud monitoring feature.\n  * `etcd_volume_size` to set etcd volume size. Default 10Gb.\n  * `kube_log_level` to set log level for kubelet in range 0 to 8.\n  * `master_volume_size` to set master vm volume size. Default 50Gb.\n  * `cluster_node_volume_type` to set master vm volume type. Default ceph-hdd.\n",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "loadbalancer_subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the load balancer's subnet. Changing this creates new cluster.",
            "computed": true,
            "force_new": true
          },
          "master_addresses": {
            "type": "TypeList",
            "description": "IP addresses of the master node of the cluster.",
            "computed": true,
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "master_count": {
            "type": "TypeInt",
            "optional": true,
            "description": "The number of master nodes for the cluster. Changing this creates a new cluster.",
            "computed": true,
            "force_new": true
          },
          "master_flavor": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of a flavor for the master nodes. If master_flavor is not present, value from cluster_template will be used.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the cluster. Changing this creates a new cluster. Should match the pattern `^[a-zA-Z][a-zA-Z0-9_.-]*$`.",
            "force_new": true
          },
          "network_id": {
            "type": "TypeString",
            "required": true,
            "description": "UUID of the cluster's network.",
            "force_new": true
          },
          "pods_network_cidr": {
            "type": "TypeString",
            "optional": true,
            "description": "Network cidr of k8s virtual network",
            "computed": true,
            "force_new": true
          },
          "project_id": {
            "type": "TypeString",
            "description": "The project of the cluster.",
            "computed": true,
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region to use for the cluster. Default is a region configured for provider.",
            "computed": true,
            "force_new": true
          },
          "registry_auth_password": {
            "type": "TypeString",
            "optional": true,
            "description": "Docker registry access password.",
            "computed": true,
            "force_new": true
          },
          "stack_id": {
            "type": "TypeString",
            "description": "UUID of the Orchestration service stack.",
            "computed": true,
            "force_new": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "Current state of a cluster. Changing this to `RUNNING` or `SHUTOFF` will turn cluster on/off.",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "required": true,
            "description": "UUID of the cluster's subnet.",
            "force_new": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The time at which cluster was created.",
            "computed": true
          },
          "user_id": {
            "type": "TypeString",
            "description": "The user of the cluster.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 60,
          "delete": 30,
          "update": 60
        },
        "description": "Provides a kubernetes cluster resource. This can be used to create, modify and delete kubernetes clusters."
      },
      "vkcs_kubernetes_node_group": {
        "schema": {
          "autoscaling_enabled": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "Determines whether the autoscaling is enabled."
          },
          "availability_zones": {
            "type": "TypeList",
            "optional": true,
            "description": "The list of availability zones of the node group. Zones `MS1` and  `GZ1` are available. By default, node group is being created at cluster's zone.\n**Important:** Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.",
            "computed": true,
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "cluster_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the existing cluster.",
            "force_new": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The time at which node group was created.",
            "computed": true
          },
          "flavor_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The flavor UUID of this node group. _note_ Starting with v0.5.1, changing this attribute does not force the resource to be recreated, which requires an in-place update and may not be provided in custom deployments. In this case, contact support for clarification.",
            "computed": true
          },
          "labels": {
            "type": "TypeList",
            "optional": true,
            "description": "The list of objects representing representing additional properties of the node group. Each object should have attribute \"key\". Object may also have optional attribute \"value\".",
            "elem": {
              "schema": {
                "key": {
                  "type": "TypeString",
                  "required": true
                },
                "value": {
                  "type": "TypeString",
                  "optional": true
                }
              }
            }
          },
          "max_node_unavailable": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.",
            "computed": true
          },
          "max_nodes": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum allowed nodes for this node group.",
            "computed": true
          },
          "min_nodes": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum allowed nodes for this node group. Default to 0 if not set.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of node group to create. Changing this will force to create a new node group.",
            "force_new": true
          },
          "node_count": {
            "type": "TypeInt",
            "required": true,
            "description": "The node count for this node group. Should be greater than 0. If `autoscaling_enabled` parameter is set, this attribute will be ignored during update."
          },
          "state": {
            "type": "TypeString",
            "description": "Determines current state of node group (RUNNING, SHUTOFF, ERROR).",
            "computed": true
          },
          "taints": {
            "type": "TypeList",
            "optional": true,
            "description": "The list of objects representing node group taints. Each object should have following attributes: key, value, effect.",
            "elem": {
              "schema": {
                "effect": {
                  "type": "TypeString",
                  "required": true
                },
                "key": {
                  "type": "TypeString",
                  "required": true
                },
                "value": {
                  "type": "TypeString",
                  "required": true
                }
              }
            }
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The time at which node group was created.",
            "computed": true
          },
          "uuid": {
            "type": "TypeString",
            "description": "The UUID of the cluster's node group.",
            "computed": true,
            "force_new": true
          },
          "volume_size": {
            "type": "TypeInt",
            "optional": true,
            "description": "The size in GB for volume to load nodes from. Changing this will force to create a new node group.",
            "computed": true,
            "force_new": true
          },
          "volume_type": {
            "type": "TypeString",
            "optional": true,
            "description": "The volume type to load nodes from. Changing this will force to create a new node group.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 60,
          "delete": 30,
          "update": 60
        },
        "description": "Provides a cluster node group resource. This can be used to create, modify and delete cluster's node group."
      },
      "vkcs_lb_l7policy": {
        "schema": {
          "action": {
            "type": "TypeString",
            "required": true,
            "description": "The L7 Policy action - can either be REDIRECT\\_TO\\_POOL, REDIRECT\\_TO\\_URL or REJECT."
          },
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN)."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the L7 Policy."
          },
          "listener_id": {
            "type": "TypeString",
            "required": true,
            "description": "The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the L7 Policy. Does not have to be unique."
          },
          "position": {
            "type": "TypeInt",
            "optional": true,
            "description": "The position of this policy on the listener. Positions start at 1.",
            "computed": true
          },
          "redirect_pool_id": {
            "type": "TypeString",
            "optional": true,
            "description": "Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT\\_TO\\_POOL."
          },
          "redirect_url": {
            "type": "TypeString",
            "optional": true,
            "description": "Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT\\_TO\\_URL."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Policy.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a Load Balancer L7 Policy resource within VKCS."
      },
      "vkcs_lb_l7rule": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN)."
          },
          "compare_type": {
            "type": "TypeString",
            "required": true,
            "description": "The comparison type for the L7 rule - can either be CONTAINS, STARTS\\_WITH, ENDS_WITH, EQUAL_TO or REGEX"
          },
          "invert": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false."
          },
          "key": {
            "type": "TypeString",
            "optional": true,
            "description": "The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when `type` is set to COOKIE or HEADER."
          },
          "l7policy_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the L7 Policy to query. Changing this creates a new L7 Rule.",
            "force_new": true
          },
          "listener_id": {
            "type": "TypeString",
            "description": "The ID of the Listener owning this resource.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Rule.",
            "computed": true,
            "force_new": true
          },
          "type": {
            "type": "TypeString",
            "required": true,
            "description": "The L7 Rule type - can either be COOKIE, FILE\\_TYPE, HEADER, HOST\\_NAME or PATH."
          },
          "value": {
            "type": "TypeString",
            "required": true,
            "description": "The value to use for the comparison. For example, the file type to compare."
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a L7 Rule resource within VKCS."
      },
      "vkcs_lb_listener": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the Listener. A valid value is true (UP) or false (DOWN)."
          },
          "allowed_cidrs": {
            "type": "TypeList",
            "optional": true,
            "description": "A list of CIDR blocks that are permitted to connect to this listener, denying all other source addresses. If not present, defaults to allow all.",
            "elem": {
              "type": "TypeString"
            }
          },
          "connection_limit": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum number of connections allowed for the Listener.",
            "computed": true
          },
          "default_pool_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the default pool with which the Listener is associated.",
            "computed": true
          },
          "default_tls_container_ref": {
            "type": "TypeString",
            "optional": true,
            "description": "A reference to a Keymanager Secrets container which stores TLS information. This is required if the protocol is `TERMINATED_HTTPS`."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the Listener."
          },
          "insert_headers": {
            "type": "TypeMap",
            "optional": true,
            "description": "The list of key value pairs representing headers to insert into the request before it is sent to the backend members. Changing this updates the headers of the existing listener."
          },
          "loadbalancer_id": {
            "type": "TypeString",
            "required": true,
            "description": "The load balancer on which to provision this Listener. Changing this creates a new Listener.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the Listener. Does not have to be unique.",
            "computed": true
          },
          "protocol": {
            "type": "TypeString",
            "required": true,
            "description": "The protocol - can either be TCP, HTTP, HTTPS, TERMINATED_HTTPS, UDP. Changing this creates a new Listener.",
            "force_new": true
          },
          "protocol_port": {
            "type": "TypeInt",
            "required": true,
            "description": "The port on which to listen for client traffic. Changing this creates a new Listener.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new Listener.",
            "computed": true,
            "force_new": true
          },
          "sni_container_refs": {
            "type": "TypeList",
            "optional": true,
            "description": "A list of references to Keymanager Secrets containers which store SNI information.",
            "elem": {
              "type": "TypeString"
            }
          },
          "timeout_client_data": {
            "type": "TypeInt",
            "optional": true,
            "description": "The client inactivity timeout in milliseconds.",
            "computed": true
          },
          "timeout_member_connect": {
            "type": "TypeInt",
            "optional": true,
            "description": "The member connection timeout in milliseconds.",
            "computed": true
          },
          "timeout_member_data": {
            "type": "TypeInt",
            "optional": true,
            "description": "The member inactivity timeout in milliseconds.",
            "computed": true
          },
          "timeout_tcp_inspect": {
            "type": "TypeInt",
            "optional": true,
            "description": "The time in milliseconds, to wait for additional TCP packets for content inspection.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a listener resource within VKCS."
      },
      "vkcs_lb_loadbalancer": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN)."
          },
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.",
            "force_new": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the Loadbalancer."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the Loadbalancer. Does not have to be unique."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new LB loadbalancer.",
            "computed": true,
            "force_new": true
          },
          "security_group_ids": {
            "type": "TypeSet",
            "optional": true,
            "description": "A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).",
            "computed": true,
            "elem": {
              "type": "TypeString"
            },
            "deprecated": "This argument is deprecated, please do not use it."
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A list of simple strings assigned to the loadbalancer.",
            "elem": {
              "type": "TypeString"
            }
          },
          "vip_address": {
            "type": "TypeString",
            "optional": true,
            "description": "The ip address of the load balancer. Changing this creates a new loadbalancer.",
            "computed": true,
            "force_new": true
          },
          "vip_network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.",
            "computed": true,
            "force_new": true
          },
          "vip_port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.",
            "computed": true,
            "force_new": true
          },
          "vip_subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 5,
          "update": 10
        },
        "description": "Manages a loadbalancer resource within VKCS."
      },
      "vkcs_lb_member": {
        "schema": {
          "address": {
            "type": "TypeString",
            "required": true,
            "description": "The IP address of the member to receive traffic from the load balancer. Changing this creates a new member.",
            "force_new": true
          },
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the member. A valid value is true (UP) or false (DOWN). Defaults to true."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the member."
          },
          "pool_id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the pool that this member will be assigned to. Changing this creates a new member.",
            "force_new": true
          },
          "protocol_port": {
            "type": "TypeInt",
            "required": true,
            "description": "The port on which to listen for client traffic. Changing this creates a new member.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new member.",
            "computed": true,
            "force_new": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The subnet in which to access the member. Changing this creates a new member.",
            "force_new": true
          },
          "weight": {
            "type": "TypeInt",
            "optional": true,
            "description": "A positive integer value that indicates the relative portion of traffic that this member should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a member with a weight of 2. Defaults to 1.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a member resource within VKCS."
      },
      "vkcs_lb_members": {
        "schema": {
          "member": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of dictionaries containing member parameters. The structure is described below.",
            "elem": {
              "schema": {
                "address": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The IP address of the members to receive traffic from the load balancer."
                },
                "admin_state_up": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": true,
                  "description": "The administrative state of the member. A valid value is true (UP) or false (DOWN). Defaults to true."
                },
                "backup": {
                  "type": "TypeBool",
                  "optional": true,
                  "description": "A bool that indicates whether the member is backup."
                },
                "id": {
                  "type": "TypeString",
                  "description": "The unique ID for the member.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "Human-readable name for the member."
                },
                "protocol_port": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "The port on which to listen for client traffic."
                },
                "subnet_id": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The subnet in which to access the member."
                },
                "weight": {
                  "type": "TypeInt",
                  "optional": true,
                  "default": 1,
                  "description": "A positive integer value that indicates the relative portion of traffic that this members should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a member with a weight of 2. Defaults to 1."
                }
              }
            }
          },
          "pool_id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the pool that members will be assigned to. Changing this creates a new members resource.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new members resource.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        }
      },
      "vkcs_lb_monitor": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the monitor. A valid value is true (UP) or false (DOWN)."
          },
          "delay": {
            "type": "TypeInt",
            "required": true,
            "description": "The time, in seconds, between sending probes to members."
          },
          "expected_codes": {
            "type": "TypeString",
            "optional": true,
            "description": "Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S) monitor. You can either specify a single status like \"200\", or a range like \"200-202\".",
            "computed": true
          },
          "http_method": {
            "type": "TypeString",
            "optional": true,
            "description": "Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to \"GET\".",
            "computed": true
          },
          "max_retries": {
            "type": "TypeInt",
            "required": true,
            "description": "Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10."
          },
          "max_retries_down": {
            "type": "TypeInt",
            "optional": true,
            "description": "Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The Name of the Monitor."
          },
          "pool_id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the pool that this monitor will be assigned to.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new monitor.",
            "computed": true,
            "force_new": true
          },
          "timeout": {
            "type": "TypeInt",
            "required": true,
            "description": "Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value."
          },
          "type": {
            "type": "TypeString",
            "required": true,
            "description": "The type of probe, which is PING, TCP, HTTP, HTTPS, TLS-HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.",
            "force_new": true
          },
          "url_path": {
            "type": "TypeString",
            "optional": true,
            "description": "Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a monitor resource within VKCS."
      },
      "vkcs_lb_pool": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the pool. A valid value is true (UP) or false (DOWN)."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the pool."
          },
          "lb_method": {
            "type": "TypeString",
            "required": true,
            "description": "The load balancing algorithm to distribute traffic to the pool's members. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT."
          },
          "listener_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The Listener on which the members of the pool will be associated with. Changing this creates a new pool. _note_ One of LoadbalancerID or ListenerID must be provided.",
            "force_new": true
          },
          "loadbalancer_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The load balancer on which to provision this pool. Changing this creates a new pool. _note_ One of LoadbalancerID or ListenerID must be provided.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable name for the pool."
          },
          "persistence": {
            "type": "TypeList",
            "optional": true,
            "description": "Omit this field to prevent session persistence. Indicates whether connections in the same session will be processed by the same Pool member or not. Changing this creates a new pool.",
            "computed": true,
            "force_new": true,
            "elem": {
              "schema": {
                "cookie_name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The name of the cookie if persistence mode is set appropriately. Required if `type = APP_COOKIE`.",
                  "force_new": true
                },
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The type of persistence mode. The current specification supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.",
                  "force_new": true
                }
              }
            },
            "max_items": 1
          },
          "protocol": {
            "type": "TypeString",
            "required": true,
            "description": "The protocol - can either be TCP, HTTP, HTTPS, PROXY, or UDP. Changing this creates a new pool.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new pool.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a pool resource within VKCS."
      },
      "vkcs_networking_floatingip": {
        "schema": {
          "address": {
            "type": "TypeString",
            "optional": true,
            "description": "The actual floating IP address itself.",
            "computed": true,
            "force_new": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the floating IP."
          },
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.",
            "computed": true
          },
          "pool": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.",
            "force_new": true
          },
          "port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of an existing port with at least one IP address to associate with this floating IP.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the `region` argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.",
            "computed": true
          },
          "subnet_ids": {
            "type": "TypeList",
            "optional": true,
            "description": "A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a `subnet_id` argument.",
            "elem": {
              "type": "TypeString"
            }
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a floating IP resource within VKCS that can be used for load balancers."
      },
      "vkcs_networking_floatingip_associate": {
        "schema": {
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "One of the port's IP addresses.",
            "computed": true
          },
          "floating_ip": {
            "type": "TypeString",
            "required": true,
            "description": "IP Address of an existing floating IP.",
            "force_new": true
          },
          "port_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of an existing port with at least one IP address to associate with this floating IP."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the `region` argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          }
        },
        "description": "Associates a floating IP to a port. This is useful for situations where you have a pre-allocated floating IP or are unable to use the `vkcs_networking_floatingip` resource to create a floating IP."
      },
      "vkcs_networking_network": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the network. Acceptable values are \"true\" and \"false\". Changing this value updates the state of the existing network."
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of tags assigned on the network, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the network. Changing this updates the name of the existing network."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the network. Changing this updates the name of the existing network."
          },
          "port_security_enabled": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of \"true\". Setting this explicitly to `false` will disable port security. Valid values are `true` and `false`."
          },
          "private_dns_domain": {
            "type": "TypeString",
            "optional": true,
            "description": "Private dns domain name",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the `region` argument of the provider is used. Changing this creates a new network.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the network.",
            "elem": {
              "type": "TypeString"
            }
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          },
          "vkcs_services_access": {
            "type": "TypeBool",
            "optional": true,
            "description": "Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are `true` and `false`."
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a network resource within VKCS."
      },
      "vkcs_networking_port": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "Administrative up/down status for the port (must be `true` or `false` if provided). Changing this updates the `admin_state_up` of an existing port."
          },
          "all_fixed_ips": {
            "type": "TypeList",
            "description": "The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "all_security_group_ids": {
            "type": "TypeSet",
            "description": "The collection of Security Group IDs on the port which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of tags assigned on the port, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "allowed_address_pairs": {
            "type": "TypeSet",
            "optional": true,
            "description": "An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.",
            "elem": {
              "schema": {
                "ip_address": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The additional IP address."
                },
                "mac_address": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The additional MAC address."
                }
              }
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the port. Changing this updates the `description` of an existing port."
          },
          "device_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the device attached to the port. Changing this creates a new port.",
            "computed": true,
            "force_new": true
          },
          "device_owner": {
            "type": "TypeString",
            "optional": true,
            "description": "The device owner of the port. Changing this creates a new port.",
            "computed": true,
            "force_new": true
          },
          "dns_assignment": {
            "type": "TypeList",
            "description": "The list of maps representing port DNS assignments.",
            "computed": true,
            "elem": {
              "type": "TypeMap"
            }
          },
          "dns_name": {
            "type": "TypeString",
            "optional": true,
            "description": "The port DNS name.",
            "computed": true
          },
          "extra_dhcp_option": {
            "type": "TypeSet",
            "optional": true,
            "description": "An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.",
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Name of the DHCP option."
                },
                "value": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Value of the DHCP option."
                }
              }
            }
          },
          "fixed_ip": {
            "type": "TypeList",
            "optional": true,
            "description": "(Conflicts with `no_fixed_ip`) An array of desired IPs for this port. The structure is described below.",
            "elem": {
              "schema": {
                "ip_address": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "IP address desired in the subnet for this port. If you don't specify `ip_address`, an available IP address from the specified subnet will be allocated to this port. This field will not be populated if it is left blank or omitted. To retrieve the assigned IP address, use the `all_fixed_ips` attribute."
                },
                "subnet_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Subnet in which to allocate IP address for this port."
                }
              }
            }
          },
          "mac_address": {
            "type": "TypeString",
            "optional": true,
            "description": "Specify a specific MAC address for the port. Changing this creates a new port.",
            "computed": true,
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "A unique name for the port. Changing this updates the `name` of an existing port."
          },
          "network_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the network to attach the port to. Changing this creates a new port.",
            "force_new": true
          },
          "no_fixed_ip": {
            "type": "TypeBool",
            "optional": true,
            "description": "(Conflicts with `fixed_ip`) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. `true` is the only valid value for this argument."
          },
          "no_security_groups": {
            "type": "TypeBool",
            "optional": true,
            "description": "(Conflicts with `security_group_ids`) If set to `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the \"default\" security group."
          },
          "port_security_enabled": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of `true`. Setting this explicitly to `false` will disable port security. In order to disable port security, the port must not have any security groups. Valid values are `true` and `false`."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new port.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "security_group_ids": {
            "type": "TypeSet",
            "optional": true,
            "description": "(Conflicts with `no_security_groups`) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).",
            "elem": {
              "type": "TypeString"
            }
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the port.",
            "elem": {
              "type": "TypeString"
            }
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a port resource within VKCS."
      },
      "vkcs_networking_port_secgroup_associate": {
        "schema": {
          "all_security_group_ids": {
            "type": "TypeSet",
            "description": "The collection of Security Group IDs on the port which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "enforce": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "Whether to replace or append the list of security groups, specified in the `security_group_ids`. Defaults to `false`."
          },
          "port_id": {
            "type": "TypeString",
            "required": true,
            "description": "An UUID of the port to apply security groups to.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to manage a port. If omitted, the `region` argument of the provider is used. Changing this creates a new resource.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "security_group_ids": {
            "type": "TypeSet",
            "required": true,
            "description": "A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).",
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "Manages a port's security groups within VKCS. Useful, when the port was created not by Terraform. It should not be used, when the port was created directly within Terraform.\n\nWhen the resource is deleted, Terraform doesn't delete the port, but unsets the list of user defined security group IDs.  However, if `enforce` is set to `true` and the resource is deleted, Terraform will remove all assigned security group IDs."
      },
      "vkcs_networking_router": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "description": "Administrative up/down status for the router (must be \"true\" or \"false\" if provided). Changing this updates the `admin_state_up` of an existing router.",
            "computed": true
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of tags assigned on the router, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description for the router."
          },
          "external_network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "A unique name for the router. Changing this updates the `name` of an existing router."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the `region` argument of the provider is used. Changing this creates a new router.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the router.",
            "elem": {
              "type": "TypeString"
            }
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional driver-specific options.",
            "force_new": true
          },
          "vendor_options": {
            "type": "TypeSet",
            "optional": true,
            "description": "Map of additional vendor-specific options. Supported options are described below.",
            "elem": {
              "schema": {
                "set_router_gateway_after_create": {
                  "type": "TypeBool",
                  "optional": true,
                  "default": false,
                  "description": "Boolean to control whether the Router gateway is assigned during creation or updated after creation."
                }
              }
            },
            "max_items": 1,
            "min_items": 1
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a router resource within VKCS."
      },
      "vkcs_networking_router_interface": {
        "schema": {
          "port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the port this interface connects to. Changing this creates a new router interface.",
            "computed": true,
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the `region` argument of the provider is used. Changing this creates a new router interface.",
            "computed": true,
            "force_new": true
          },
          "router_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the router this interface belongs to. Changing this creates a new router interface.",
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the subnet this interface connects to. Changing this creates a new router interface.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a router interface resource within VKCS."
      },
      "vkcs_networking_router_route": {
        "schema": {
          "destination_cidr": {
            "type": "TypeString",
            "required": true,
            "description": "CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.",
            "force_new": true
          },
          "next_hop": {
            "type": "TypeString",
            "required": true,
            "description": "IP address of the next hop gateway. Changing this creates a new routing entry.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the `region` argument of the provider is used. Changing this creates a new routing entry.",
            "computed": true,
            "force_new": true
          },
          "router_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the router this routing entry belongs to. Changing this creates a new routing entry.",
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          }
        },
        "description": "Creates a routing entry on a VKCS router."
      },
      "vkcs_networking_secgroup": {
        "schema": {
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of tags assigned on the security group, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "delete_default_rules": {
            "type": "TypeBool",
            "optional": true,
            "description": "Whether or not to delete the default egress security rules. This is `false` by default. See the below note for more information.",
            "force_new": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "A unique name for the security group.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "A unique name for the security group."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new security group.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the security group.",
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "timeouts": {
          "delete": 10
        },
        "description": "Manages a security group resource within VKCS."
      },
      "vkcs_networking_secgroup_rule": {
        "schema": {
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "A description of the rule. Changing this creates a new security group rule.",
            "force_new": true
          },
          "direction": {
            "type": "TypeString",
            "required": true,
            "description": "The direction of the rule, valid values are __ingress__ or __egress__. Changing this creates a new security group rule.",
            "force_new": true
          },
          "ethertype": {
            "type": "TypeString",
            "optional": true,
            "default": "IPv4",
            "description": "The layer 3 protocol type, the only valid value is __IPv4__. Changing this creates a new security group rule.",
            "force_new": true,
            "deprecated": "Only IPv4 can be used as ethertype. This argument is deprecated, please do not use it."
          },
          "port_range_max": {
            "type": "TypeInt",
            "optional": true,
            "description": "The higher part of the allowed port range, valid integer value needs to be between 1 and 65535. To specify all ports, `port_range_min` and `port_range_max` arguments must be absent. Changing this creates a new security group rule.",
            "computed": true,
            "force_new": true
          },
          "port_range_min": {
            "type": "TypeInt",
            "optional": true,
            "description": "The lower part of the allowed port range, valid integer value needs to be between 1 and 65535. To specify all ports, `port_range_min` and `port_range_max` arguments must be absent. Changing this creates a new security group rule.",
            "computed": true,
            "force_new": true
          },
          "protocol": {
            "type": "TypeString",
            "optional": true,
            "description": "The layer 4 protocol type, valid values are following. Changing this creates a new security group rule. This is required if you want to specify a port range.\n  * __tcp__\n  * __udp__\n  * __icmp__\n  * __ah__\n  * __dccp__\n  * __egp__\n  * __esp__\n  * __gre__\n  * __igmp__\n  * __ospf__\n  * __pgm__\n  * __rsvp__\n  * __sctp__\n  * __udplite__\n  * __vrrp__",
            "computed": true,
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new security group rule.",
            "computed": true,
            "force_new": true
          },
          "remote_group_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The remote group id, the value needs to be an ID of a security group in the same tenant. Changing this creates a new security group rule. _note_ Only one of `remote_group_id` or `remote_ip_prefix` may be set.",
            "computed": true,
            "force_new": true
          },
          "remote_ip_prefix": {
            "type": "TypeString",
            "optional": true,
            "description": "The remote CIDR, the value needs to be a valid CIDR (i.e. 192.168.0.0/16). Changing this creates a new security group rule. _note_ Only one of `remote_group_id` or `remote_ip_prefix` may be set.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "security_group_id": {
            "type": "TypeString",
            "required": true,
            "description": "The security group id the rule should belong to, the value needs to be an ID of a security group in the same tenant. Changing this creates a new security group rule.",
            "force_new": true
          }
        },
        "timeouts": {
          "delete": 10
        },
        "description": "Manages a security group rule resource within VKCS."
      },
      "vkcs_networking_subnet": {
        "schema": {
          "all_tags": {
            "type": "TypeSet",
            "description": "The collection of ags assigned on the subnet, which have been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "allocation_pool": {
            "type": "TypeSet",
            "optional": true,
            "description": "A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple `allocation_pool` blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The `allocation_pool` block is documented below.",
            "computed": true,
            "elem": {
              "schema": {
                "end": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The ending address."
                },
                "start": {
                  "type": "TypeString",
                  "required": true,
                  "description": "The starting address."
                }
              }
            }
          },
          "cidr": {
            "type": "TypeString",
            "optional": true,
            "description": "CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.",
            "computed": true,
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the subnet. Changing this updates the name of the existing subnet."
          },
          "dns_nameservers": {
            "type": "TypeList",
            "optional": true,
            "description": "An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.",
            "elem": {
              "type": "TypeString"
            }
          },
          "enable_dhcp": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the network. Acceptable values are \"true\" and \"false\". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true."
          },
          "gateway_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "Default gateway used by devices in this subnet. Leaving this blank and not setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the existing subnet.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the subnet. Changing this updates the name of the existing subnet."
          },
          "network_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the parent network. Changing this creates a new subnet.",
            "force_new": true
          },
          "no_gateway": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet."
          },
          "prefix_length": {
            "type": "TypeInt",
            "optional": true,
            "description": "The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the `region` argument of the provider is used. Changing this creates a new subnet.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "subnetpool_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the subnetpool associated with the subnet.",
            "force_new": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "A set of string tags for the subnet.",
            "elem": {
              "type": "TypeString"
            }
          },
          "value_specs": {
            "type": "TypeMap",
            "optional": true,
            "description": "Map of additional options.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a subnet resource within VKCS."
      },
      "vkcs_networking_subnet_route": {
        "schema": {
          "destination_cidr": {
            "type": "TypeString",
            "required": true,
            "description": "CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.",
            "force_new": true
          },
          "next_hop": {
            "type": "TypeString",
            "required": true,
            "description": "IP address of the next hop gateway. Changing this creates a new routing entry.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a subnet. If omitted, the `region` argument of the provider is used. Changing this creates a new routing entry.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true,
            "force_new": true
          },
          "subnet_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the subnet this routing entry belongs to. Changing this creates a new routing entry.",
            "force_new": true
          }
        },
        "description": "Creates a routing entry on a VKCS subnet."
      },
      "vkcs_publicdns_record": {
        "schema": {
          "content": {
            "type": "TypeString",
            "optional": true,
            "description": "The content of the record.",
            "computed": true
          },
          "full_name": {
            "type": "TypeString",
            "description": "The full name of the SRV record.",
            "computed": true
          },
          "host": {
            "type": "TypeString",
            "optional": true,
            "description": "The domain name of the target host.",
            "computed": true
          },
          "ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The IP address of the record. It should be IPv4 for record of type \"A\" and IPv6 for record of type \"AAAA\".",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the record.",
            "computed": true
          },
          "port": {
            "type": "TypeInt",
            "optional": true,
            "description": "The port on the target host of the service.",
            "computed": true
          },
          "priority": {
            "type": "TypeInt",
            "optional": true,
            "description": "The priority of the record's server.",
            "computed": true
          },
          "proto": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the desired protocol."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used. Changing this creates a new record.",
            "computed": true,
            "force_new": true
          },
          "service": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the desired service."
          },
          "ttl": {
            "type": "TypeInt",
            "optional": true,
            "description": "The time to live of the record.",
            "computed": true
          },
          "type": {
            "type": "TypeString",
            "required": true,
            "description": "The type of the record. Must be one of following: \"A\", \"AAAA\", \"CNAME\", \"MX\", \"NS\", \"SRV\", \"TXT\".",
            "force_new": true
          },
          "weight": {
            "type": "TypeInt",
            "optional": true,
            "description": "The relative weight of the record's server.",
            "computed": true
          },
          "zone_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the zone to attach the record to.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a public DNS zone record resource within VKCS._note_ Although some arguments are marked as optional, it is actually required to set values for them depending on record \\\"type\\\". Use this map to get information about which arguments you have to set:\n\n| Record type | Required arguments |\n| ----------- | ------------------ |\n| A | ip |\n| AAAA | ip |\n| CNAME | name, content |\n| MX | priority, content |\n| NS | content |\n| SRV | service, proto, priority, weight, host, port |\n| TXT | content |\n\n\n",
        "new_since": "v0.2.0"
      },
      "vkcs_publicdns_zone": {
        "schema": {
          "admin_email": {
            "type": "TypeString",
            "optional": true,
            "description": "The admin email of the zone SOA."
          },
          "expire": {
            "type": "TypeInt",
            "optional": true,
            "description": "The expire time of the zone SOA.",
            "computed": true
          },
          "primary_dns": {
            "type": "TypeString",
            "optional": true,
            "description": "The primary DNS of the zone SOA.",
            "computed": true
          },
          "refresh": {
            "type": "TypeInt",
            "optional": true,
            "description": "The refresh time of the zone SOA.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used. Changing this creates a new zone.",
            "computed": true,
            "force_new": true
          },
          "retry": {
            "type": "TypeInt",
            "optional": true,
            "description": "The retry time of the zone SOA.",
            "computed": true
          },
          "serial": {
            "type": "TypeInt",
            "description": "The serial number of the zone SOA.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the zone.",
            "computed": true
          },
          "ttl": {
            "type": "TypeInt",
            "optional": true,
            "description": "The TTL (time to live) of the zone SOA.",
            "computed": true
          },
          "zone": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the zone. **Changes this creates a new zone**.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10
        },
        "description": "Manages a public DNS record resource within VKCS.",
        "new_since": "v0.2.0"
      },
      "vkcs_sharedfilesystem_securityservice": {
        "schema": {
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the security service. Changing this updates the description of the existing security service."
          },
          "dns_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The security service DNS IP address that is used inside the tenant network."
          },
          "domain": {
            "type": "TypeString",
            "optional": true,
            "description": "The security service domain."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the security service. Changing this updates the name of the existing security service."
          },
          "password": {
            "type": "TypeString",
            "optional": true,
            "description": "The user password, if you specify a user."
          },
          "project_id": {
            "type": "TypeString",
            "description": "The owner of the Security Service.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client. A Shared File System client is needed to create a security service. If omitted, the `region` argument of the provider is used. Changing this creates a new security service.",
            "computed": true,
            "force_new": true
          },
          "server": {
            "type": "TypeString",
            "optional": true,
            "description": "The security service host name or IP address."
          },
          "type": {
            "type": "TypeString",
            "required": true,
            "description": "The security service type - can either be active\\_directory, kerberos or ldap.  Changing this updates the existing security service."
          },
          "user": {
            "type": "TypeString",
            "optional": true,
            "description": "The security service user or group name that is used by the tenant."
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Use this resource to configure a security service._note_ All arguments including the security service password will be stored in the raw state as plain-text. [Read more about sensitive data in state](/docs/state/sensitive-data.html).\n\nA security service stores configuration information for clients for authentication and authorization (AuthN/AuthZ). For example, a share server will be the client for an existing service such as LDAP, Kerberos, or Microsoft Active Directory."
      },
      "vkcs_sharedfilesystem_share": {
        "schema": {
          "all_metadata": {
            "type": "TypeMap",
            "description": "The map of metadata, assigned on the share, which has been explicitly and implicitly added.",
            "computed": true
          },
          "availability_zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The share availability zone. Changing this creates a new share.",
            "computed": true,
            "force_new": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the share. Changing this updates the description of the existing share."
          },
          "export_location_path": {
            "type": "TypeString",
            "description": "The export location path of the share.",
            "computed": true,
            "new_since": "v0.1.15"
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The name of the share. Changing this updates the name of the existing share."
          },
          "project_id": {
            "type": "TypeString",
            "description": "The owner of the Share.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share. Changing this creates a new share.",
            "computed": true,
            "force_new": true
          },
          "share_network_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the share network."
          },
          "share_proto": {
            "type": "TypeString",
            "required": true,
            "description": "The share protocol - can either be NFS, CIFS, CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.",
            "force_new": true
          },
          "share_server_id": {
            "type": "TypeString",
            "description": "The UUID of the share server.",
            "computed": true
          },
          "share_type": {
            "type": "TypeString",
            "optional": true,
            "description": "The share type name. If you omit this parameter, the default share type is used.",
            "computed": true,
            "force_new": true
          },
          "size": {
            "type": "TypeInt",
            "required": true,
            "description": "The share size, in GBs. The requested share size cannot be greater than the allowed GB quota. Changing this resizes the existing share."
          },
          "snapshot_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the share's base snapshot. Changing this creates a new share.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Use this resource to configure a share."
      },
      "vkcs_sharedfilesystem_share_access": {
        "schema": {
          "access_level": {
            "type": "TypeString",
            "required": true,
            "description": "The access level to the share. Can either be `rw` or `ro`.",
            "force_new": true
          },
          "access_to": {
            "type": "TypeString",
            "required": true,
            "description": "The value that defines the access. Can either be an IP address or a username verified by configured Security Service of the Share Network.",
            "force_new": true
          },
          "access_type": {
            "type": "TypeString",
            "required": true,
            "description": "The access rule type. Can either be an ip, user, cert, or cephx.",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share access. Changing this creates a new share access.",
            "computed": true,
            "force_new": true
          },
          "share_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the share to which you are granted access.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Use this resource to control the share access lists.\n\n~\u003e **Important Security Notice** The access key assigned by this resource will be stored *unencrypted* in your Terraform state file. If you use this resource in production, please make sure your state file is sufficiently protected. [Read more about sensitive data in state](https://www.terraform.io/docs/language/state/sensitive-data.html)."
      },
      "vkcs_sharedfilesystem_sharenetwork": {
        "schema": {
          "cidr": {
            "type": "TypeString",
            "description": "The share network CIDR.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the share network. Changing this updates the description of the existing share network."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name for the share network. Changing this updates the name of the existing share network."
          },
          "neutron_net_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of a neutron network when setting up or updating a share network. Changing this updates the existing share network if it's not used by shares."
          },
          "neutron_subnet_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the neutron subnet when setting up or updating a share network. Changing this updates the existing share network if it's not used by shares."
          },
          "project_id": {
            "type": "TypeString",
            "description": "The owner of the Share Network.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share network. If omitted, the `region` argument of the provider is used. Changing this creates a new share network.",
            "computed": true,
            "force_new": true
          },
          "security_service_ids": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of security service IDs to associate with the share network. The security service must be specified by ID and not name.",
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Use this resource to configure a share network.\n\nA share network stores network information that share servers can use when shares are created."
      },
      "vkcs_vpnaas_endpoint_group": {
        "schema": {
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the group. Changing this updates the description of the existing group."
          },
          "endpoints": {
            "type": "TypeSet",
            "optional": true,
            "description": "List of endpoints of the same type, for the endpoint group. The values will depend on the type. Changing this creates a new group.",
            "force_new": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the group. Changing this updates the name of the existing group."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create an endpoint group. If omitted, the `region` argument of the provider is used. Changing this creates a new group.",
            "computed": true,
            "force_new": true
          },
          "type": {
            "type": "TypeString",
            "optional": true,
            "description": "The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan. Changing this creates a new group.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages an Endpoint Group resource within VKCS."
      },
      "vkcs_vpnaas_ike_policy": {
        "schema": {
          "auth_algorithm": {
            "type": "TypeString",
            "optional": true,
            "default": "sha1",
            "description": "The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512. Default is sha1. Changing this updates the algorithm of the existing policy."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the policy. Changing this updates the description of the existing policy."
          },
          "encryption_algorithm": {
            "type": "TypeString",
            "optional": true,
            "default": "aes-128",
            "description": "The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on. The default value is aes-128. Changing this updates the existing policy."
          },
          "ike_version": {
            "type": "TypeString",
            "optional": true,
            "default": "v1",
            "description": "The IKE mode. A valid value is v1 or v2. Default is v1. Changing this updates the existing policy."
          },
          "lifetime": {
            "type": "TypeSet",
            "optional": true,
            "description": "The lifetime of the security association. Consists of Unit and Value.",
            "computed": true,
            "elem": {
              "schema": {
                "units": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The units for the lifetime of the security association. Can be either seconds or kilobytes. Default is seconds.",
                  "computed": true
                },
                "value": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The value for the lifetime of the security association. Must be a positive integer. Default is 3600.",
                  "computed": true
                }
              }
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the policy. Changing this updates the name of the existing policy."
          },
          "pfs": {
            "type": "TypeString",
            "optional": true,
            "default": "group5",
            "description": "The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5. Changing this updates the existing policy."
          },
          "phase1_negotiation_mode": {
            "type": "TypeString",
            "optional": true,
            "default": "main",
            "description": "The IKE mode. A valid value is main, which is the default. Changing this updates the existing policy."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a VPN service. If omitted, the `region` argument of the provider is used. Changing this creates a new service.",
            "computed": true,
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10
        },
        "description": "Manages a IKE policy resource within VKCS."
      },
      "vkcs_vpnaas_ipsec_policy": {
        "schema": {
          "auth_algorithm": {
            "type": "TypeString",
            "optional": true,
            "description": "The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512. Default is sha1. Changing this updates the algorithm of the existing policy.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the policy. Changing this updates the description of the existing policy."
          },
          "encapsulation_mode": {
            "type": "TypeString",
            "optional": true,
            "description": "The encapsulation mode. Valid values are tunnel and transport. Default is tunnel. Changing this updates the existing policy.",
            "computed": true
          },
          "encryption_algorithm": {
            "type": "TypeString",
            "optional": true,
            "description": "The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on. The default value is aes-128. Changing this updates the existing policy.",
            "computed": true
          },
          "lifetime": {
            "type": "TypeSet",
            "optional": true,
            "description": "The lifetime of the security association. Consists of Unit and Value.",
            "computed": true,
            "elem": {
              "schema": {
                "units": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The units for the lifetime of the security association. Can be either seconds or kilobytes. Default is seconds.",
                  "computed": true
                },
                "value": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The value for the lifetime of the security association. Must be a positive integer. Default is 3600.",
                  "computed": true
                }
              }
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the policy. Changing this updates the name of the existing policy."
          },
          "pfs": {
            "type": "TypeString",
            "optional": true,
            "description": "The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5. Changing this updates the existing policy.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create an IPSec policy. If omitted, the `region` argument of the provider is used. Changing this creates a new policy.",
            "computed": true,
            "force_new": true
          },
          "transform_protocol": {
            "type": "TypeString",
            "optional": true,
            "description": "The transform protocol. Valid values are ESP, AH and AH-ESP. Changing this updates the existing policy. Default is ESP.",
            "computed": true
          }
        },
        "timeouts": {
          "create": 10
        },
        "description": "Manages a IPSec policy resource within VKCS."
      },
      "vkcs_vpnaas_service": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the resource. Can either be up(true) or down(false). Changing this updates the administrative state of the existing service."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the service. Changing this updates the description of the existing service."
          },
          "external_v4_ip": {
            "type": "TypeString",
            "description": "The read-only external (public) IPv4 address that is used for the VPN service.",
            "computed": true
          },
          "external_v6_ip": {
            "type": "TypeString",
            "description": "The read-only external (public) IPv6 address that is used for the VPN service.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the service. Changing this updates the name of the existing service."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create a VPN service. If omitted, the `region` argument of the provider is used. Changing this creates a new service.",
            "computed": true,
            "force_new": true
          },
          "router_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the router. Changing this creates a new service.",
            "force_new": true
          },
          "status": {
            "type": "TypeString",
            "description": "Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "SubnetID is the ID of the subnet. Default is null.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a VPN service resource within VKCS."
      },
      "vkcs_vpnaas_site_connection": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "default": true,
            "description": "The administrative state of the resource. Can either be up(true) or down(false). Changing this updates the administrative state of the existing connection."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the connection. Changing this updates the description of the existing connection."
          },
          "dpd": {
            "type": "TypeSet",
            "optional": true,
            "description": "A dictionary with dead peer detection (DPD) protocol controls.",
            "computed": true,
            "elem": {
              "schema": {
                "action": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The dead peer detection (DPD) action. A valid value is clear, hold, restart, disabled, or restart-by-peer. Default value is hold.",
                  "computed": true
                },
                "interval": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The dead peer detection (DPD) interval, in seconds. A valid value is a positive integer. Default is 30.",
                  "computed": true
                },
                "timeout": {
                  "type": "TypeInt",
                  "optional": true,
                  "description": "The dead peer detection (DPD) timeout in seconds. A valid value is a positive integer that is greater than the DPD interval value. Default is 120.",
                  "computed": true
                }
              }
            }
          },
          "ikepolicy_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the IKE policy. Changing this creates a new connection.",
            "force_new": true
          },
          "initiator": {
            "type": "TypeString",
            "optional": true,
            "description": "A valid value is response-only or bi-directional. Default is bi-directional.",
            "computed": true
          },
          "ipsecpolicy_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the IPsec policy. Changing this creates a new connection.",
            "force_new": true
          },
          "local_ep_group_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID for the endpoint group that contains private subnets for the local side of the connection. You must specify this parameter with the peer_ep_group_id parameter unless in backward- compatible mode where peer_cidrs is provided with a subnet_id for the VPN service. Changing this updates the existing connection."
          },
          "local_id": {
            "type": "TypeString",
            "optional": true,
            "description": "An ID to be used instead of the external IP address for a virtual router used in traffic between instances on different networks in east-west traffic. Most often, local ID would be domain name, email address, etc. If this is not configured then the external IP address will be used as the ID."
          },
          "mtu": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum transmission unit (MTU) value to address fragmentation. Minimum value is 68 for IPv4, and 1280 for IPv6.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the connection. Changing this updates the name of the existing connection."
          },
          "peer_address": {
            "type": "TypeString",
            "required": true,
            "description": "The peer gateway public IPv4 or IPv6 address or FQDN."
          },
          "peer_cidrs": {
            "type": "TypeList",
            "optional": true,
            "description": "Unique list of valid peer private CIDRs in the form \u003c net_address \u003e / \u003c prefix \u003e.",
            "elem": {
              "type": "TypeString"
            }
          },
          "peer_ep_group_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID for the endpoint group that contains private CIDRs in the form \u003c net_address \u003e / \u003c prefix \u003e for the peer side of the connection. You must specify this parameter with the local_ep_group_id parameter unless in backward-compatible mode where peer_cidrs is provided with a subnet_id for the VPN service."
          },
          "peer_id": {
            "type": "TypeString",
            "required": true,
            "description": "The peer router identity for authentication. A valid value is an IPv4 address, IPv6 address, e-mail address, key ID, or FQDN. Typically, this value matches the peer_address value. Changing this updates the existing policy."
          },
          "psk": {
            "type": "TypeString",
            "required": true,
            "description": "The pre-shared key. A valid value is any string."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Networking client. A Networking client is needed to create an IPSec site connection. If omitted, the `region` argument of the provider is used. Changing this creates a new site connection.",
            "computed": true,
            "force_new": true
          },
          "vpnservice_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the VPN service. Changing this creates a new connection.",
            "force_new": true
          }
        },
        "timeouts": {
          "create": 10,
          "delete": 10,
          "update": 10
        },
        "description": "Manages a IPSec site connection resource within VKCS."
      }
    },
    "data_sources": {
      "vkcs_backup_plan": {
        "schema": {
          "full_retention": {
            "description": "Parameters for full retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full",
            "computed": true
          },
          "gfs_retention": {
            "description": "Parameters for gfs retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "incremental_backup": {
            "type": "TypeBool",
            "description": "Whether incremental backups should be stored",
            "computed": true
          },
          "instance_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the instance that should be included in backup plan"
          },
          "instance_ids": {
            "type": "TypeList",
            "description": "List of ids of backed up instances",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "Name of the backup plan"
          },
          "provider_id": {
            "type": "TypeString",
            "description": "ID of backup provider",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          },
          "schedule": {
            "computed": true
          }
        },
        "description": "Use this data source to get backup plan info",
        "new_since": "v0.4.0"
      },
      "vkcs_backup_provider": {
        "schema": {
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "Name of the backup provider"
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          }
        },
        "description": "Use this data source to get backup provider info",
        "new_since": "v0.4.0"
      },
      "vkcs_backup_providers": {
        "schema": {
          "id": {
            "type": "TypeString",
            "computed": true
          },
          "providers": {
            "type": "TypeList",
            "description": "List of available backup providers",
            "computed": true,
            "elem": {
              "schema": {
                "id": {
                  "type": "TypeString",
                  "description": "ID of the backup provider",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Name of the backup provider"
                }
              }
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          }
        },
        "description": "Use this data source to get backup providers info",
        "new_since": "v0.4.0"
      },
      "vkcs_blockstorage_snapshot": {
        "schema": {
          "description": {
            "type": "TypeString",
            "description": "The snapshot's description.",
            "computed": true
          },
          "metadata": {
            "type": "TypeMap",
            "description": "The snapshot's metadata.",
            "computed": true
          },
          "most_recent": {
            "type": "TypeBool",
            "optional": true,
            "description": "Pick the most recently created snapshot if there are multiple results."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the snapshot.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Block Storage client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "size": {
            "type": "TypeInt",
            "description": "The size of the snapshot.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the snapshot.",
            "computed": true
          },
          "volume_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the snapshot's volume.",
            "computed": true
          }
        },
        "description": "Use this data source to get information about an existing snapshot."
      },
      "vkcs_blockstorage_volume": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "description": "The name of the availability zone of the volume.",
            "computed": true
          },
          "bootable": {
            "type": "TypeString",
            "optional": true,
            "description": "Indicates if the volume is bootable.",
            "computed": true
          },
          "metadata": {
            "type": "TypeMap",
            "optional": true,
            "description": "Metadata key/value pairs associated with the volume.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the volume.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Block Storage client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "size": {
            "type": "TypeInt",
            "description": "The size of the volume in GBs.",
            "computed": true
          },
          "source_volume_id": {
            "type": "TypeString",
            "description": "The ID of the volume from which the current volume was created.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the volume.",
            "computed": true
          },
          "volume_type": {
            "type": "TypeString",
            "optional": true,
            "description": "The type of the volume.",
            "computed": true
          }
        },
        "description": "Use this data source to get information about an existing volume."
      },
      "vkcs_compute_availability_zones": {
        "schema": {
          "id": {
            "type": "TypeString",
            "description": "Hash of the returned zone list.",
            "computed": true
          },
          "names": {
            "type": "TypeList",
            "description": "The names of the availability zones, ordered alphanumerically, that match the queried `state`",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`",
            "computed": true
          },
          "state": {
            "type": "TypeString",
            "optional": true,
            "default": "available",
            "description": "The `state` of the availability zones to match, default (\"available\")."
          }
        },
        "description": "Use this data source to get a list of availability zones from VKCS"
      },
      "vkcs_compute_flavor": {
        "schema": {
          "disk": {
            "type": "TypeInt",
            "optional": true,
            "description": "The exact amount of disk (in gigabytes).",
            "force_new": true
          },
          "extra_specs": {
            "type": "TypeMap",
            "description": "Key/Value pairs of metadata for the flavor.",
            "computed": true
          },
          "flavor_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the flavor. Conflicts with the `name`, `min_ram` and `min_disk`",
            "force_new": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found flavor.",
            "computed": true
          },
          "is_public": {
            "type": "TypeBool",
            "optional": true,
            "description": "The flavor visibility.",
            "force_new": true
          },
          "min_disk": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum amount of disk (in gigabytes). Conflicts with the `flavor_id`.",
            "force_new": true
          },
          "min_ram": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum amount of RAM (in megabytes). Conflicts with the `flavor_id`.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the flavor. Conflicts with the `flavor_id`.",
            "force_new": true
          },
          "ram": {
            "type": "TypeInt",
            "optional": true,
            "description": "The exact amount of RAM (in megabytes).",
            "force_new": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "force_new": true
          },
          "rx_tx_factor": {
            "type": "TypeFloat",
            "optional": true,
            "description": "The `rx_tx_factor` of the flavor.",
            "force_new": true
          },
          "swap": {
            "type": "TypeInt",
            "optional": true,
            "description": "The amount of swap (in gigabytes).",
            "force_new": true
          },
          "vcpus": {
            "type": "TypeInt",
            "optional": true,
            "description": "The amount of VCPUs.",
            "force_new": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS flavor."
      },
      "vkcs_compute_instance": {
        "schema": {
          "access_ip_v4": {
            "type": "TypeString",
            "description": "The first IPv4 address assigned to this server.",
            "computed": true
          },
          "availability_zone": {
            "type": "TypeString",
            "description": "The availability zone of this server.",
            "computed": true
          },
          "flavor_id": {
            "type": "TypeString",
            "description": "The flavor ID used to create the server.",
            "computed": true
          },
          "flavor_name": {
            "type": "TypeString",
            "description": "The flavor name used to create the server.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the instance"
          },
          "image_id": {
            "type": "TypeString",
            "description": "The image ID used to create the server.",
            "computed": true
          },
          "image_name": {
            "type": "TypeString",
            "description": "The image name used to create the server.",
            "computed": true
          },
          "key_pair": {
            "type": "TypeString",
            "description": "The name of the key pair assigned to this server.",
            "computed": true
          },
          "metadata": {
            "type": "TypeMap",
            "description": "A set of key/value pairs made available to the server.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "description": "The name of the server.",
            "computed": true
          },
          "network": {
            "type": "TypeList",
            "optional": true,
            "description": "An array of maps, detailed below.",
            "computed": true,
            "elem": {
              "schema": {
                "fixed_ip_v4": {
                  "type": "TypeString",
                  "description": "The IPv4 address assigned to this network port.",
                  "computed": true
                },
                "mac": {
                  "type": "TypeString",
                  "description": "The MAC address assigned to this network interface.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "The name of the network",
                  "computed": true
                },
                "port": {
                  "type": "TypeString",
                  "description": "The port UUID for this network",
                  "computed": true
                },
                "uuid": {
                  "type": "TypeString",
                  "description": "The UUID of the network",
                  "computed": true
                }
              }
            }
          },
          "power_state": {
            "type": "TypeString",
            "description": "VM state",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "security_groups": {
            "type": "TypeSet",
            "description": "An array of security group names associated with this server.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "tags": {
            "type": "TypeSet",
            "description": "A set of string tags for the instance.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "user_data": {
            "type": "TypeString",
            "optional": true,
            "description": "The user data added when the server was created.",
            "computed": true
          }
        },
        "description": "Use this data source to get the details of a running server"
      },
      "vkcs_compute_keypair": {
        "schema": {
          "fingerprint": {
            "type": "TypeString",
            "description": "The fingerprint of the OpenSSH key.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "The unique name of the keypair."
          },
          "public_key": {
            "type": "TypeString",
            "description": "The OpenSSH-formatted public key of the keypair.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID and public key of an VKCS keypair."
      },
      "vkcs_compute_quotaset": {
        "schema": {
          "cores": {
            "type": "TypeInt",
            "description": "The number of allowed server cores.",
            "computed": true
          },
          "injected_file_content_bytes": {
            "type": "TypeInt",
            "description": "The number of allowed bytes of content for each injected file.",
            "computed": true
          },
          "injected_file_path_bytes": {
            "type": "TypeInt",
            "description": "The number of allowed bytes for each injected file path.",
            "computed": true
          },
          "injected_files": {
            "type": "TypeInt",
            "description": "The number of allowed injected files.",
            "computed": true
          },
          "instances": {
            "type": "TypeInt",
            "description": "The number of allowed servers.",
            "computed": true
          },
          "key_pairs": {
            "type": "TypeInt",
            "description": "The number of allowed key pairs for each user.",
            "computed": true
          },
          "metadata_items": {
            "type": "TypeInt",
            "description": "The number of allowed metadata items for each server.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the project to retrieve the quotaset.",
            "force_new": true
          },
          "ram": {
            "type": "TypeInt",
            "description": "The amount of allowed server RAM, in MiB.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Compute client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "force_new": true
          },
          "server_group_members": {
            "type": "TypeInt",
            "description": "The number of allowed members for each server group.",
            "computed": true
          },
          "server_groups": {
            "type": "TypeInt",
            "description": "The number of allowed server groups.",
            "computed": true
          }
        },
        "description": "Use this data source to get the compute quotaset of an VKCS project."
      },
      "vkcs_db_backup": {
        "schema": {
          "backup_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the backup."
          },
          "created": {
            "type": "TypeString",
            "description": "Backup creation timestamp",
            "computed": true
          },
          "datastore": {
            "type": "TypeList",
            "description": "Object that represents datastore of backup",
            "computed": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore."
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore."
                }
              }
            }
          },
          "dbms_id": {
            "type": "TypeString",
            "description": "ID of the backed up instance or cluster",
            "computed": true
          },
          "dbms_type": {
            "type": "TypeString",
            "description": "Type of dbms of the backup, can be \"instance\" or \"cluster\".",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The description of the backup"
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "location_ref": {
            "type": "TypeString",
            "description": "Location of backup data on backup storage",
            "computed": true
          },
          "meta": {
            "type": "TypeString",
            "description": "Metadata of the backup",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "description": "The name of the backup.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "new_since": "v0.4.0"
          },
          "size": {
            "type": "TypeFloat",
            "description": "Backup's volume size",
            "computed": true
          },
          "updated": {
            "type": "TypeString",
            "description": "Timestamp of backup's last update",
            "computed": true
          },
          "wal_size": {
            "type": "TypeFloat",
            "description": "Backup's WAL volume size",
            "computed": true
          }
        },
        "description": "Use this data source to get the information on a db backup resource."
      },
      "vkcs_db_config_group": {
        "schema": {
          "config_group_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the config_group."
          },
          "created": {
            "type": "TypeString",
            "description": "Timestamp of config group's creation.",
            "computed": true
          },
          "datastore": {
            "type": "TypeList",
            "description": "Object that represents datastore of backup",
            "computed": true,
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore."
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore."
                }
              }
            }
          },
          "description": {
            "type": "TypeString",
            "description": "The description of the config group.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "description": "The name of the config group.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "new_since": "v0.4.0"
          },
          "updated": {
            "type": "TypeString",
            "description": "Timestamp of config group's last update.",
            "computed": true
          },
          "values": {
            "type": "TypeMap",
            "description": "Map of configuration parameters in format \"key\": \"value\".",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "Use this data source to get the information on a db config group resource.",
        "new_since": "v0.1.7"
      },
      "vkcs_db_database": {
        "schema": {
          "charset": {
            "type": "TypeString",
            "optional": true,
            "description": "Type of charset used for the database.",
            "force_new": true
          },
          "collate": {
            "type": "TypeString",
            "optional": true,
            "description": "Collate option of the database.",
            "force_new": true
          },
          "dbms_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the instance or cluster that database is created for."
          },
          "id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the database in form \"dbms_id/db_name\"."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the database."
          }
        },
        "description": "Use this data source to get the information on a db database resource."
      },
      "vkcs_db_datastore": {
        "schema": {
          "cluster_volume_types": {
            "type": "TypeList",
            "description": "Supported volume types for the datastore when used in a cluster.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "id": {
            "type": "TypeString",
            "optional": true,
            "description": "The id of the datastore.",
            "computed": true
          },
          "minimum_cpu": {
            "type": "TypeInt",
            "description": "Minimum CPU required for instance of the datastore.",
            "computed": true
          },
          "minimum_ram": {
            "type": "TypeInt",
            "description": "Minimum RAM required for instance of the datastore.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the datastore.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "versions": {
            "type": "TypeList",
            "description": "Versions of the datastore.",
            "computed": true,
            "elem": {
              "schema": {
                "id": {
                  "type": "TypeString",
                  "description": "ID of a version of the datastore.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of a version of the datastore.",
                  "computed": true
                }
              }
            }
          },
          "volume_types": {
            "type": "TypeList",
            "description": "Supported volume types for the datastore.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "Use this data source to get information on a VKCS db datastore.",
        "new_since": "v0.2.0"
      },
      "vkcs_db_datastore_capabilities": {
        "schema": {
          "capabilities": {
            "type": "TypeList",
            "description": "Capabilities of the datastore.",
            "computed": true,
            "elem": {
              "schema": {
                "allow_major_upgrade": {
                  "type": "TypeBool",
                  "description": "This attribute indicates whether a capability can be applied in the next major version of data store.",
                  "computed": true
                },
                "allow_upgrade_from_backup": {
                  "type": "TypeBool",
                  "description": "This attribute indicates whether a capability can be applied to upgrade from backup.",
                  "computed": true
                },
                "description": {
                  "type": "TypeString",
                  "description": "Description of data store capability.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of data store capability.",
                  "computed": true
                },
                "params": {
                  "type": "TypeList",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "default_value": {
                        "type": "TypeString",
                        "description": "Default value for a parameter.",
                        "computed": true
                      },
                      "element_type": {
                        "type": "TypeString",
                        "description": "Type of element value for a parameter of `list` type.",
                        "computed": true
                      },
                      "enum_values": {
                        "type": "TypeList",
                        "description": "Supported values for a parameter.",
                        "computed": true,
                        "elem": {
                          "type": "TypeString"
                        }
                      },
                      "masked": {
                        "type": "TypeBool",
                        "description": "Masked indicates whether a parameter value must be a boolean mask.",
                        "computed": true
                      },
                      "max": {
                        "type": "TypeFloat",
                        "description": "Maximum value for a parameter.",
                        "computed": true
                      },
                      "min": {
                        "type": "TypeFloat",
                        "description": "Minimum value for a parameter.",
                        "computed": true
                      },
                      "name": {
                        "type": "TypeString",
                        "description": "Name of a parameter.",
                        "computed": true
                      },
                      "regex": {
                        "type": "TypeString",
                        "description": "Regular expression that a parameter value must match.",
                        "computed": true
                      },
                      "required": {
                        "type": "TypeBool",
                        "description": "Required indicates whether a parameter value must be set.",
                        "computed": true
                      },
                      "type": {
                        "type": "TypeString",
                        "description": "Type of value for a parameter.",
                        "computed": true
                      }
                    }
                  }
                },
                "should_be_on_master": {
                  "type": "TypeBool",
                  "description": "This attribute indicates whether a capability applies only to the master node.",
                  "computed": true
                }
              }
            }
          },
          "datastore_name": {
            "type": "TypeString",
            "required": true,
            "description": "Name of the data store."
          },
          "datastore_version_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the version of the data store."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          }
        },
        "description": "Use this data source to get capabilities supported for a VKCS datastore.",
        "new_since": "v0.2.0"
      },
      "vkcs_db_datastore_parameters": {
        "schema": {
          "datastore_name": {
            "type": "TypeString",
            "required": true,
            "description": "Name of the data store."
          },
          "datastore_version_id": {
            "type": "TypeString",
            "required": true,
            "description": "ID of the version of the data store."
          },
          "id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the resource.",
            "computed": true
          },
          "parameters": {
            "type": "TypeList",
            "description": "Configuration parameters supported for the datastore.",
            "computed": true,
            "elem": {
              "schema": {
                "max": {
                  "type": "TypeFloat",
                  "description": "Maximum value of a configuration parameter.",
                  "computed": true
                },
                "min": {
                  "type": "TypeFloat",
                  "description": "Minimum value of a configuration parameter.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of a configuration parameter.",
                  "computed": true
                },
                "restart_required": {
                  "type": "TypeBool",
                  "description": "This attribute indicates whether a restart required when a parameter is set.",
                  "computed": true
                },
                "type": {
                  "type": "TypeString",
                  "description": "Type of a configuration parameter.",
                  "computed": true
                }
              }
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          }
        },
        "description": "Use this data source to get configuration parameters supported for a VKCS datastore.",
        "new_since": "v0.2.0"
      },
      "vkcs_db_datastores": {
        "schema": {
          "datastores": {
            "type": "TypeList",
            "description": "List of datastores within VKCS.",
            "computed": true,
            "elem": {
              "schema": {
                "id": {
                  "type": "TypeString",
                  "description": "ID of a datastore.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of a datastore.",
                  "computed": true
                }
              }
            }
          },
          "id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the resource.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          }
        },
        "description": "Use this data source to get a list of datastores from VKCS.",
        "new_since": "v0.2.0"
      },
      "vkcs_db_instance": {
        "schema": {
          "backup_schedule": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents configuration of PITR backup. This functionality is available only for postgres datastore.",
            "elem": {
              "schema": {
                "interval_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Time interval between backups, specified in hours. Available values: 3, 6, 8, 12, 24."
                },
                "keep_count": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Number of backups to be stored."
                },
                "name": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Name of the schedule."
                },
                "start_hours": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Hours part of timestamp of initial backup."
                },
                "start_minutes": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Minutes part of timestamp of initial backup."
                }
              }
            },
            "new_since": "v0.1.4"
          },
          "datastore": {
            "type": "TypeList",
            "optional": true,
            "description": "Object that represents datastore of the instance.",
            "elem": {
              "schema": {
                "type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the datastore."
                },
                "version": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Version of the datastore."
                }
              }
            },
            "max_items": 1
          },
          "flavor_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of flavor for the instance."
          },
          "hostname": {
            "type": "TypeString",
            "optional": true,
            "description": "The hostname of the instance."
          },
          "id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the instance."
          },
          "ip": {
            "type": "TypeList",
            "optional": true,
            "description": "IP address of the instance.",
            "elem": {
              "type": "TypeString"
            }
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the instance."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "Region of the resource."
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "Instance status."
          },
          "volume": {
            "type": "TypeSet",
            "optional": true,
            "description": "Object that describes volume of the instance.",
            "elem": {
              "schema": {
                "size": {
                  "type": "TypeInt",
                  "required": true,
                  "description": "Size of the instance volume."
                },
                "used": {
                  "type": "TypeFloat",
                  "required": true,
                  "description": "Size of the used volume space."
                },
                "volume_id": {
                  "type": "TypeString",
                  "required": true,
                  "description": "ID of the instance volume."
                },
                "volume_type": {
                  "type": "TypeString",
                  "required": true,
                  "description": "Type of the instance volume."
                }
              }
            },
            "max_items": 1
          }
        },
        "description": "Use this data source to get the information on a db instance resource."
      },
      "vkcs_db_user": {
        "schema": {
          "databases": {
            "type": "TypeList",
            "optional": true,
            "description": "List of names of the databases, that user is created for.",
            "elem": {
              "type": "TypeString"
            }
          },
          "dbms_id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the instance or cluster that user is created for."
          },
          "host": {
            "type": "TypeString",
            "optional": true,
            "description": "IP address of the host that user will be accessible from."
          },
          "id": {
            "type": "TypeString",
            "required": true,
            "description": "The id of the user in form \"dbms_id/user_name\"."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the user. Changing this creates a new user."
          },
          "password": {
            "type": "TypeString",
            "optional": true,
            "description": "The password of the user."
          }
        },
        "description": "Use this data source to get the information on a db user resource."
      },
      "vkcs_dc_api_options": {
        "schema": {
          "availability_zones": {
            "type": "TypeList",
            "description": "List of avalability zone options",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "flavors": {
            "type": "TypeList",
            "description": "List of flavor options for vkcs_dc_router resource",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the data source",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The `region` to fetch availability zones from, defaults to the provider's `region`.",
            "computed": true
          }
        },
        "description": "Use this data source to get direct connect api options.\u003cbr\u003e ~\u003e **Note:** This data source requires Sprut SDN to be enabled in your project.",
        "new_since": "v0.5.0"
      },
      "vkcs_images_image": {
        "schema": {
          "checksum": {
            "type": "TypeString",
            "description": "The checksum of the data associated with the image.",
            "computed": true
          },
          "container_format": {
            "type": "TypeString",
            "description": "The format of the image's container.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the image was created.",
            "computed": true
          },
          "default": {
            "type": "TypeBool",
            "optional": true,
            "description": "Search for an image that is available for virtual machine creation.",
            "new_since": "v0.4.2"
          },
          "disk_format": {
            "type": "TypeString",
            "description": "The format of the image's disk.",
            "computed": true
          },
          "file": {
            "type": "TypeString",
            "description": "The trailing path after the endpoint that represent the location of the image or the path to retrieve it.",
            "computed": true
          },
          "member_status": {
            "type": "TypeString",
            "optional": true,
            "description": "Status for adding a new member (tenant) to an image member list.",
            "force_new": true
          },
          "metadata": {
            "type": "TypeMap",
            "description": "The metadata associated with the image. Image metadata allow for meaningfully define the image properties and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.",
            "computed": true
          },
          "min_disk_gb": {
            "type": "TypeInt",
            "description": "The minimum amount of disk space required to use the image.",
            "computed": true
          },
          "min_ram_mb": {
            "type": "TypeInt",
            "description": "The minimum amount of ram required to use the image.",
            "computed": true
          },
          "most_recent": {
            "type": "TypeBool",
            "optional": true,
            "default": false,
            "description": "If more than one result is returned, use the most recent image.",
            "force_new": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the image.",
            "force_new": true
          },
          "owner": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner (UUID) of the image.",
            "force_new": true
          },
          "properties": {
            "type": "TypeMap",
            "optional": true,
            "description": "A map of key/value pairs to match an image with. All specified properties must be matched. Unlike other options filtering by `properties` does by client on the result of search query. Filtering is applied if server response contains at least 2 images. In case there is only one image the `properties` ignores.",
            "force_new": true
          },
          "protected": {
            "type": "TypeBool",
            "description": "Whether or not the image is protected.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Image client. An Image client is needed to create an Image that can be used with a compute instance. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "force_new": true
          },
          "schema": {
            "type": "TypeString",
            "description": "The path to the JSON-schema that represent the image or image",
            "computed": true
          },
          "size_bytes": {
            "type": "TypeInt",
            "description": "The size of the image (in bytes).",
            "computed": true
          },
          "size_max": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum size (in bytes) of the image to return.",
            "force_new": true
          },
          "size_min": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum size (in bytes) of the image to return.",
            "force_new": true
          },
          "tag": {
            "type": "TypeString",
            "optional": true,
            "description": "Search for images with a specific tag.",
            "force_new": true
          },
          "tags": {
            "type": "TypeSet",
            "description": "The tags list of the image.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the image was last updated.",
            "computed": true
          },
          "visibility": {
            "type": "TypeString",
            "optional": true,
            "description": "The visibility of the image. Must be one of \"public\", \"private\", \"community\", or \"shared\".",
            "force_new": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS image."
      },
      "vkcs_images_images": {
        "schema": {
          "created_at": {
            "type": "TypeString",
            "optional": true,
            "description": "Date filter to select images with created_at matching the specified criteria. Value should be either RFC3339 formatted time or time filter in format `filter:time`, where `filter` is one of [eq, neq, gt, gte, lt, lte] and `time` is RFC3339 formatted time."
          },
          "default": {
            "type": "TypeBool",
            "optional": true,
            "description": "The flag used to filter images based on whether they are available for virtual machine creation."
          },
          "id": {
            "type": "TypeString",
            "description": "The ID of the data source",
            "computed": true
          },
          "images": {
            "type": "TypeList",
            "description": "Images matching specified criteria.",
            "computed": true,
            "elem": {
              "schema": {
                "id": {
                  "type": "TypeString",
                  "description": "ID of an image.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of an image.",
                  "computed": true
                },
                "properties": {
                  "type": "TypeMap",
                  "description": "Properties associated with an image.",
                  "computed": true,
                  "elem": {
                    "type": "TypeString"
                  }
                }
              }
            }
          },
          "owner": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the owner of images."
          },
          "properties": {
            "type": "TypeMap",
            "optional": true,
            "description": "Search for images with specific properties.",
            "elem": {
              "type": "TypeString"
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Images client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "size_max": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum size (in bytes) of images to return."
          },
          "size_min": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum size (in bytes) of images to return."
          },
          "tags": {
            "type": "TypeList",
            "optional": true,
            "description": "Search for images with specific tags.",
            "elem": {
              "type": "TypeString"
            }
          },
          "updated_at": {
            "type": "TypeString",
            "optional": true,
            "description": "Date filter to select images with updated_at matching the specified criteria. Value should be either RFC3339 formatted time or time filter in format `filter:time`, where `filter` is one of [eq, neq, gt, gte, lt, lte] and `time` is RFC3339 formatted time."
          },
          "visibility": {
            "type": "TypeString",
            "optional": true,
            "description": "The visibility of images. Must be one of \"public\", \"private\", \"community\", or \"shared\"."
          }
        },
        "description": "Use this data source to get information on VKCS images.",
        "new_since": "v0.4.2"
      },
      "vkcs_keymanager_container": {
        "schema": {
          "acl": {
            "type": "TypeList",
            "description": "ACLs assigned to a container.",
            "computed": true,
            "elem": {
              "schema": {
                "read": {
                  "type": "TypeList",
                  "description": "Object that describes read operation.",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "created_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was created.",
                        "computed": true
                      },
                      "project_access": {
                        "type": "TypeBool",
                        "description": "Whether the container is accessible project wide.",
                        "computed": true
                      },
                      "updated_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was last updated.",
                        "computed": true
                      },
                      "users": {
                        "type": "TypeSet",
                        "description": "The list of user IDs, which are allowed to access the container, when `project_access` is set to `false`.",
                        "computed": true,
                        "elem": {
                          "type": "TypeString"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "consumers": {
            "type": "TypeList",
            "description": "The list of the container consumers.",
            "computed": true,
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The name of the consumer."
                },
                "url": {
                  "type": "TypeString",
                  "optional": true,
                  "description": "The consumer URL."
                }
              }
            }
          },
          "container_ref": {
            "type": "TypeString",
            "description": "The container reference / where to find the container.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the container was created.",
            "computed": true
          },
          "creator_id": {
            "type": "TypeString",
            "description": "The creator of the container.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The Container name.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the VKCS Key Manager client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "secret_refs": {
            "type": "TypeSet",
            "description": "A set of dictionaries containing references to secrets.",
            "computed": true,
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "optional": true
                },
                "secret_ref": {
                  "type": "TypeString",
                  "optional": true
                }
              }
            }
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the container.",
            "computed": true
          },
          "type": {
            "type": "TypeString",
            "description": "The container type.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the container was last updated.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available Key container."
      },
      "vkcs_keymanager_secret": {
        "schema": {
          "acl": {
            "type": "TypeList",
            "description": "The list of ACLs assigned to a secret.",
            "computed": true,
            "elem": {
              "schema": {
                "read": {
                  "type": "TypeList",
                  "description": "Block that describes read operation.",
                  "computed": true,
                  "elem": {
                    "schema": {
                      "created_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was created.",
                        "computed": true
                      },
                      "project_access": {
                        "type": "TypeBool",
                        "optional": true,
                        "description": "Whether the container is accessible project wide. Defaults to `true`."
                      },
                      "updated_at": {
                        "type": "TypeString",
                        "description": "The date the container ACL was last updated.",
                        "computed": true
                      },
                      "users": {
                        "type": "TypeSet",
                        "optional": true,
                        "description": "The list of user IDs, which are allowed to access the container, when `project_access` is set to `false`.",
                        "elem": {
                          "type": "TypeString"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "acl_only": {
            "type": "TypeBool",
            "optional": true,
            "description": "Select the Secret with an ACL that contains the user. Project scope is ignored. Defaults to `false`."
          },
          "algorithm": {
            "type": "TypeString",
            "optional": true,
            "description": "The Secret algorithm.",
            "computed": true
          },
          "bit_length": {
            "type": "TypeInt",
            "optional": true,
            "description": "The Secret bit length.",
            "computed": true
          },
          "content_types": {
            "type": "TypeMap",
            "description": "The map of the content types, assigned on the secret.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "created_at": {
            "type": "TypeString",
            "description": "The date the secret was created.",
            "computed": true
          },
          "created_at_filter": {
            "type": "TypeString",
            "optional": true,
            "description": "Date filter to select the Secret with created matching the specified criteria. See Date Filters below for more detail."
          },
          "creator_id": {
            "type": "TypeString",
            "description": "The creator of the secret.",
            "computed": true
          },
          "expiration": {
            "type": "TypeString",
            "description": "The date the secret will expire.",
            "computed": true
          },
          "expiration_filter": {
            "type": "TypeString",
            "optional": true,
            "description": "Date filter to select the Secret with expiration matching the specified criteria. See Date Filters below for more detail."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "metadata": {
            "type": "TypeMap",
            "description": "The map of metadata, assigned on the secret, which has been explicitly and implicitly added.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "mode": {
            "type": "TypeString",
            "optional": true,
            "description": "The Secret mode.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The Secret name.",
            "computed": true
          },
          "payload": {
            "type": "TypeString",
            "description": "The secret payload.",
            "computed": true
          },
          "payload_content_encoding": {
            "type": "TypeString",
            "description": "The Secret encoding.",
            "computed": true
          },
          "payload_content_type": {
            "type": "TypeString",
            "description": "The Secret content type.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "secret_ref": {
            "type": "TypeString",
            "description": "The secret reference / where to find the secret.",
            "computed": true
          },
          "secret_type": {
            "type": "TypeString",
            "optional": true,
            "description": "The Secret type. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "description": "The status of the secret.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The date the secret was last updated.",
            "computed": true
          },
          "updated_at_filter": {
            "type": "TypeString",
            "optional": true,
            "description": "Date filter to select the Secret with updated matching the specified criteria. See Date Filters below for more detail."
          }
        },
        "description": "Use this data source to get the ID and the payload of an available Key secret\n\n~\u003e **Important Security Notice** The payload of this data source will be stored *unencrypted* in your Terraform state file. **Use of this resource for production deployments is *not* recommended**. [Read more about sensitive data in state](https://www.terraform.io/docs/language/state/sensitive-data.html)."
      },
      "vkcs_kubernetes_addon": {
        "schema": {
          "cluster_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the kubernetes cluster."
          },
          "configuration_values": {
            "type": "TypeString",
            "description": "Configuration code for the addon. If the addon was installed in the cluster, this value is the user-provided configuration code, otherwise it is a template for this cluster.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "installed": {
            "type": "TypeBool",
            "description": "Whether the addon was installed in the cluster.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "required": true,
            "description": "An addon name to filter by."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "version": {
            "type": "TypeString",
            "required": true,
            "description": "An addon version to filter by."
          }
        },
        "description": "Provides a kubernetes cluster addon datasource. This can be used to get information about an VKCS cluster addon.",
        "new_since": "v0.3.0"
      },
      "vkcs_kubernetes_addons": {
        "schema": {
          "addons": {
            "type": "TypeList",
            "computed": true,
            "elem": {
              "schema": {
                "id": {
                  "type": "TypeString",
                  "description": "ID of an addon.",
                  "computed": true
                },
                "installed": {
                  "type": "TypeBool",
                  "description": "Whether an addon was installed in the cluster.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of an addon.",
                  "computed": true
                },
                "version": {
                  "type": "TypeString",
                  "description": "Version of an addon.",
                  "computed": true
                }
              }
            }
          },
          "cluster_id": {
            "type": "TypeString",
            "required": true,
            "description": "The ID of the kubernetes cluster."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          }
        },
        "description": "Provides a kubernetes cluster addons datasource. This can be used to get information about an VKCS cluster addons.",
        "new_since": "v0.3.0"
      },
      "vkcs_kubernetes_cluster": {
        "schema": {
          "api_address": {
            "type": "TypeString",
            "description": "COE API address.",
            "computed": true
          },
          "api_lb_fip": {
            "type": "TypeString",
            "description": "API LoadBalancer fip.",
            "computed": true
          },
          "api_lb_vip": {
            "type": "TypeString",
            "description": "API LoadBalancer vip.",
            "computed": true
          },
          "availability_zone": {
            "type": "TypeString",
            "description": "Availability zone of the cluster.",
            "computed": true
          },
          "cluster_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the Kubernetes cluster template. _note_ Only one of `name` or `cluster_id` must be specified.",
            "computed": true
          },
          "cluster_template_id": {
            "type": "TypeString",
            "description": "The UUID of the V1 Container Infra cluster template.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The time at which cluster was created.",
            "computed": true
          },
          "discovery_url": {
            "type": "TypeString",
            "description": "The URL used for cluster node discovery.",
            "computed": true
          },
          "dns_domain": {
            "type": "TypeString",
            "optional": true,
            "description": "Custom DNS cluster domain.",
            "computed": true
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "description": "Indicates whether floating ip is enabled for cluster.",
            "computed": true
          },
          "ingress_floating_ip": {
            "type": "TypeString",
            "description": "Floating IP created for ingress service.",
            "computed": true
          },
          "insecure_registries": {
            "type": "TypeList",
            "description": "Addresses of registries from which you can download images without checking certificates.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "k8s_config": {
            "type": "TypeString",
            "description": "Kubeconfig for cluster",
            "computed": true
          },
          "keypair": {
            "type": "TypeString",
            "description": "The name of the Compute service SSH keypair.",
            "computed": true
          },
          "labels": {
            "type": "TypeMap",
            "description": "The list of key value pairs representing additional properties of the cluster.",
            "computed": true
          },
          "loadbalancer_subnet_id": {
            "type": "TypeString",
            "description": "The ID of load balancer's subnet.",
            "computed": true
          },
          "master_addresses": {
            "type": "TypeList",
            "description": "IP addresses of the master node of the cluster.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "master_count": {
            "type": "TypeInt",
            "description": "The number of master nodes for the cluster.",
            "computed": true
          },
          "master_flavor": {
            "type": "TypeString",
            "description": "The ID of the flavor for the master nodes.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the cluster. _note_ Only one of `name` or `cluster_id` must be specified.",
            "computed": true
          },
          "network_id": {
            "type": "TypeString",
            "description": "UUID of the cluster's network.",
            "computed": true
          },
          "pods_network_cidr": {
            "type": "TypeString",
            "description": "Network cidr of k8s virtual network.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "description": "The project of the cluster.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Container Infra client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "registry_auth_password": {
            "type": "TypeString",
            "description": "Docker registry access password.",
            "computed": true
          },
          "stack_id": {
            "type": "TypeString",
            "description": "UUID of the Orchestration service stack.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "description": "Current state of a cluster.",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "description": "UUID of the cluster's subnet.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The time at which cluster was created.",
            "computed": true
          },
          "user_id": {
            "type": "TypeString",
            "description": "The user of the cluster.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS kubernetes cluster."
      },
      "vkcs_kubernetes_clustertemplate": {
        "schema": {
          "apiserver_port": {
            "type": "TypeInt",
            "description": "The API server port for the Container Orchestration Engine for this cluster template.",
            "computed": true
          },
          "cluster_distro": {
            "type": "TypeString",
            "description": "The distro for the cluster (fedora-atomic, coreos, etc.).",
            "computed": true
          },
          "cluster_template_uuid": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the cluster template. _note_ Only one of `name` or `version` or `cluster_template_uuid` must be specified.",
            "computed": true
          },
          "created_at": {
            "type": "TypeString",
            "description": "The time at which cluster template was created.",
            "computed": true
          },
          "deprecated_at": {
            "type": "TypeString",
            "description": "The time at which the cluster template is deprecated.",
            "computed": true
          },
          "dns_nameserver": {
            "type": "TypeString",
            "description": "Address of the DNS nameserver that is used in nodes of the cluster.",
            "computed": true
          },
          "docker_storage_driver": {
            "type": "TypeString",
            "description": "Docker storage driver. Changing this updates the Docker storage driver of the existing cluster template.",
            "computed": true
          },
          "docker_volume_size": {
            "type": "TypeInt",
            "description": "The size (in GB) of the Docker volume.",
            "computed": true
          },
          "external_network_id": {
            "type": "TypeString",
            "description": "The ID of the external network that will be used for the cluster.",
            "computed": true
          },
          "flavor": {
            "type": "TypeString",
            "description": "The ID of flavor for the nodes of the cluster.",
            "computed": true
          },
          "floating_ip_enabled": {
            "type": "TypeBool",
            "description": "Indicates whether created cluster should create IP floating IP for every node or not.",
            "computed": true
          },
          "image": {
            "type": "TypeString",
            "description": "The reference to an image that is used for nodes of the cluster.",
            "computed": true
          },
          "insecure_registry": {
            "type": "TypeString",
            "description": "The insecure registry URL for the cluster template.",
            "computed": true
          },
          "keypair_id": {
            "type": "TypeString",
            "description": "The name of the Compute service SSH keypair.",
            "computed": true
          },
          "labels": {
            "type": "TypeMap",
            "description": "The list of key value pairs representing additional properties of the cluster template.",
            "computed": true
          },
          "master_flavor": {
            "type": "TypeString",
            "description": "The ID of flavor for the master nodes.",
            "computed": true
          },
          "master_lb_enabled": {
            "type": "TypeBool",
            "description": "Indicates whether created cluster should has a loadbalancer for master nodes or not.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the cluster template. _note_ Only one of `name` or `version` or `cluster_template_uuid` must be specified.",
            "computed": true
          },
          "network_driver": {
            "type": "TypeString",
            "description": "The name of the driver for the container network.",
            "computed": true
          },
          "no_proxy": {
            "type": "TypeString",
            "description": "A comma-separated list of IP addresses that shouldn't be used in the cluster.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "description": "The project of the cluster template.",
            "computed": true
          },
          "public": {
            "type": "TypeBool",
            "description": "Indicates whether cluster template should be public.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the V1 Container Infra client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "registry_enabled": {
            "type": "TypeBool",
            "description": "Indicates whether Docker registry is enabled in the cluster.",
            "computed": true
          },
          "server_type": {
            "type": "TypeString",
            "description": "The server type for the cluster template.",
            "computed": true
          },
          "tls_disabled": {
            "type": "TypeBool",
            "description": "Indicates whether the TLS should be disabled in the cluster.",
            "computed": true
          },
          "updated_at": {
            "type": "TypeString",
            "description": "The time at which cluster template was updated.",
            "computed": true
          },
          "user_id": {
            "type": "TypeString",
            "description": "The user of the cluster template.",
            "computed": true
          },
          "version": {
            "type": "TypeString",
            "optional": true,
            "description": "Kubernetes version of the cluster.",
            "computed": true
          },
          "volume_driver": {
            "type": "TypeString",
            "description": "The name of the driver that is used for the volumes of the cluster nodes.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS kubernetes cluster template."
      },
      "vkcs_kubernetes_clustertemplates": {
        "schema": {
          "cluster_templates": {
            "type": "TypeList",
            "description": "Available kubernetes cluster templates.",
            "computed": true,
            "elem": {
              "schema": {
                "cluster_template_uuid": {
                  "type": "TypeString",
                  "description": "UUID of a cluster template.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of a cluster template.",
                  "computed": true
                },
                "version": {
                  "type": "TypeString",
                  "description": "Version of a cluster template.",
                  "computed": true
                }
              }
            }
          },
          "id": {
            "type": "TypeString",
            "description": "Random identifier of the data source.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "new_since": "v0.3.0"
          }
        },
        "description": "Use this data source to get a list of available VKCS Kubernetes Cluster Templates. To get details about each cluster template the data source can be combined with the `vkcs_kubernetes_clustertemplate` data source."
      },
      "vkcs_kubernetes_node_group": {
        "schema": {
          "autoscaling_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "Determines whether the autoscaling is enabled.",
            "computed": true
          },
          "availability_zones": {
            "type": "TypeList",
            "description": "The list of availability zones of the node group.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "cluster_id": {
            "type": "TypeString",
            "description": "The UUID of cluster that node group belongs.",
            "computed": true
          },
          "flavor_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The id of the flavor.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the resource.",
            "computed": true
          },
          "max_node_unavailable": {
            "type": "TypeInt",
            "optional": true,
            "description": "Specified as a percentage. The maximum number of nodes that can fail during an upgrade.",
            "computed": true
          },
          "max_nodes": {
            "type": "TypeInt",
            "optional": true,
            "description": "The maximum amount of nodes in the node group.",
            "computed": true
          },
          "min_nodes": {
            "type": "TypeInt",
            "optional": true,
            "description": "The minimum amount of nodes in the node group.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the node group.",
            "computed": true
          },
          "node_count": {
            "type": "TypeInt",
            "optional": true,
            "description": "The count of nodes in the node group.",
            "computed": true
          },
          "nodes": {
            "type": "TypeList",
            "description": "The list of node group's node objects.",
            "computed": true,
            "elem": {
              "schema": {
                "created_at": {
                  "type": "TypeString",
                  "description": "Time when a node was created.",
                  "computed": true
                },
                "name": {
                  "type": "TypeString",
                  "description": "Name of a node.",
                  "computed": true
                },
                "node_group_id": {
                  "type": "TypeString",
                  "description": "The node group id.",
                  "computed": true
                },
                "updated_at": {
                  "type": "TypeString",
                  "description": "Time when a node was updated.",
                  "computed": true
                },
                "uuid": {
                  "type": "TypeString",
                  "description": "UUID of a node.",
                  "computed": true
                }
              }
            }
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region to obtain the service client. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "new_since": "v0.4.0"
          },
          "state": {
            "type": "TypeString",
            "description": "Determines current state of node group (RUNNING, SHUTOFF, ERROR).",
            "computed": true
          },
          "uuid": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the cluster's node group."
          },
          "volume_size": {
            "type": "TypeInt",
            "optional": true,
            "description": "The amount of memory in the volume in GB",
            "computed": true
          },
          "volume_type": {
            "type": "TypeString",
            "optional": true,
            "description": "The type of the volume.",
            "computed": true
          }
        },
        "description": "Use this data source to get information on VKCS Kubernetes cluster's node group."
      },
      "vkcs_lb_loadbalancer": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "description": "The administrative state of the Loadbalancer.",
            "computed": true
          },
          "availability_zone": {
            "type": "TypeString",
            "description": "The availability zone of the Loadbalancer.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "description": "Human-readable description of the Loadbalancer.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the Loadbalancer"
          },
          "name": {
            "type": "TypeString",
            "description": "The name of the Loadbalancer.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "security_group_ids": {
            "type": "TypeSet",
            "description": "A list of security group IDs applied to the Loadbalancer.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "tags": {
            "type": "TypeSet",
            "description": "A list of simple strings assigned to the loadbalancer.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "vip_address": {
            "type": "TypeString",
            "description": "The ip address of the Loadbalancer.",
            "computed": true
          },
          "vip_network_id": {
            "type": "TypeString",
            "description": "The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.",
            "computed": true
          },
          "vip_port_id": {
            "type": "TypeString",
            "description": "The port UUID of the Loadbalancer.",
            "computed": true
          },
          "vip_subnet_id": {
            "type": "TypeString",
            "description": "The subnet on which the Loadbalancer's address is allocated.",
            "computed": true
          }
        },
        "description": "Use this data source to get the details of a loadbalancer"
      },
      "vkcs_networking_floatingip": {
        "schema": {
          "address": {
            "type": "TypeString",
            "optional": true,
            "description": "The IP address of the floating IP."
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the floating IP."
          },
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The specific IP address of the internal port which should be associated with the floating IP."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found floating IP.",
            "computed": true
          },
          "pool": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the pool from which the floating IP belongs to."
          },
          "port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the port the floating IP is attached."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve floating IP ids. If omitted, the `region` argument of the provider is used."
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN."
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "Status of the floating IP (ACTIVE/DOWN)."
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner of the floating IP."
          }
        },
        "description": "Use this data source to get the ID of an available VKCS floating IP."
      },
      "vkcs_networking_network": {
        "schema": {
          "admin_state_up": {
            "type": "TypeString",
            "description": "The administrative state of the network.",
            "computed": true
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The set of string tags applied on the network.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the network."
          },
          "external": {
            "type": "TypeBool",
            "optional": true,
            "description": "The external routing facility of the network."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found network.",
            "computed": true
          },
          "matching_subnet_cidr": {
            "type": "TypeString",
            "optional": true,
            "description": "The CIDR of a subnet within the network."
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the network."
          },
          "network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the network."
          },
          "private_dns_domain": {
            "type": "TypeString",
            "description": "Private dns domain name",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve networks ids. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN."
          },
          "shared": {
            "type": "TypeString",
            "description": "Specifies whether the network resource can be accessed by any tenant or not.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the network."
          },
          "subnets": {
            "type": "TypeList",
            "description": "A list of subnet IDs belonging to the network.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of network tags to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner of the network."
          },
          "vkcs_services_access": {
            "type": "TypeBool",
            "optional": true,
            "description": "Specifies whether VKCS services access is enabled."
          }
        },
        "description": "Use this data source to get the ID of an available VKCS network."
      },
      "vkcs_networking_port": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "description": "The administrative state of the port.",
            "computed": true
          },
          "all_fixed_ips": {
            "type": "TypeList",
            "description": "The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "all_security_group_ids": {
            "type": "TypeSet",
            "description": "The set of security group IDs applied on the port.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The set of string tags applied on the port.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "allowed_address_pairs": {
            "type": "TypeSet",
            "description": "An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.",
            "computed": true,
            "elem": {
              "schema": {
                "ip_address": {
                  "type": "TypeString",
                  "description": "The additional IP address.",
                  "computed": true
                },
                "mac_address": {
                  "type": "TypeString",
                  "description": "The additional MAC address.",
                  "computed": true
                }
              }
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the port.",
            "computed": true
          },
          "device_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the device the port belongs to.",
            "computed": true
          },
          "device_owner": {
            "type": "TypeString",
            "optional": true,
            "description": "The device owner of the port.",
            "computed": true
          },
          "dns_assignment": {
            "type": "TypeList",
            "description": "The list of maps representing port DNS assignments.",
            "computed": true,
            "elem": {
              "type": "TypeMap"
            }
          },
          "dns_name": {
            "type": "TypeString",
            "optional": true,
            "description": "The port DNS name to filter.",
            "computed": true
          },
          "extra_dhcp_option": {
            "type": "TypeList",
            "description": "An extra DHCP option configured on the port. The structure is described below.",
            "computed": true,
            "elem": {
              "schema": {
                "name": {
                  "type": "TypeString",
                  "description": "Name of the DHCP option.",
                  "computed": true
                },
                "value": {
                  "type": "TypeString",
                  "description": "Value of the DHCP option.",
                  "computed": true
                }
              }
            }
          },
          "fixed_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The port IP address filter."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found port.",
            "computed": true
          },
          "mac_address": {
            "type": "TypeString",
            "optional": true,
            "description": "The MAC address of the port.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the port.",
            "computed": true
          },
          "network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the network the port belongs to.",
            "computed": true
          },
          "port_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the port.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The project_id of the owner of the port.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve port ids. If omitted, the `region` argument of the provider is used."
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true
          },
          "security_group_ids": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of port security group IDs to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the port.",
            "computed": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of port tags to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The tenant_id of the owner of the port.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS port."
      },
      "vkcs_networking_router": {
        "schema": {
          "admin_state_up": {
            "type": "TypeBool",
            "optional": true,
            "description": "Administrative up/down status for the router (must be \"true\" or \"false\" if provided)."
          },
          "all_tags": {
            "type": "TypeSet",
            "description": "The set of string tags applied on the router.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the router."
          },
          "enable_snat": {
            "type": "TypeBool",
            "optional": true,
            "description": "The value that points out if the Source NAT is enabled on the router.",
            "computed": true
          },
          "external_network_id": {
            "type": "TypeString",
            "description": "The network UUID of an external gateway for the router.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found router.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the router."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve router ids. If omitted, the `region` argument of the provider is used."
          },
          "router_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the router resource."
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN."
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the router (ACTIVE/DOWN)."
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of router tags to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner of the router."
          }
        },
        "description": "Use this data source to get the ID of an available VKCS router."
      },
      "vkcs_networking_secgroup": {
        "schema": {
          "all_tags": {
            "type": "TypeSet",
            "description": "The set of string tags applied on the security group.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description the the subnet."
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found security group.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the security group."
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve security groups ids. If omitted, the `region` argument of the provider is used.",
            "computed": true,
            "force_new": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN."
          },
          "secgroup_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the security group."
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of security group tags to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner of the security group.",
            "computed": true,
            "force_new": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS security group."
      },
      "vkcs_networking_subnet": {
        "schema": {
          "all_tags": {
            "type": "TypeSet",
            "description": "A set of string tags applied on the subnet.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "allocation_pools": {
            "type": "TypeList",
            "description": "Allocation pools of the subnet.",
            "computed": true,
            "elem": {
              "schema": {
                "end": {
                  "type": "TypeString",
                  "description": "The ending address.",
                  "computed": true
                },
                "start": {
                  "type": "TypeString",
                  "description": "The starting address.",
                  "computed": true
                }
              }
            }
          },
          "cidr": {
            "type": "TypeString",
            "optional": true,
            "description": "The CIDR of the subnet.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "Human-readable description of the subnet.",
            "computed": true
          },
          "dhcp_enabled": {
            "type": "TypeBool",
            "optional": true,
            "description": "If the subnet has DHCP enabled."
          },
          "dns_nameservers": {
            "type": "TypeSet",
            "description": "DNS Nameservers of the subnet.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          },
          "enable_dhcp": {
            "type": "TypeBool",
            "description": "Whether the subnet has DHCP enabled or not.",
            "computed": true
          },
          "gateway_ip": {
            "type": "TypeString",
            "optional": true,
            "description": "The IP of the subnet's gateway.",
            "computed": true
          },
          "host_routes": {
            "type": "TypeList",
            "description": "Host Routes of the subnet.",
            "computed": true,
            "elem": {
              "schema": {
                "destination_cidr": {
                  "type": "TypeString",
                  "computed": true
                },
                "next_hop": {
                  "type": "TypeString",
                  "computed": true
                }
              }
            }
          },
          "id": {
            "type": "TypeString",
            "description": "ID of the found subnet.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the subnet.",
            "computed": true
          },
          "network_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the network the subnet belongs to.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Network client. A Network client is needed to retrieve subnet ids. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "sdn": {
            "type": "TypeString",
            "optional": true,
            "description": "SDN to use for this resource. Must be one of following: \"neutron\", \"sprut\". Default value is project's default SDN.",
            "computed": true
          },
          "subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the subnet.",
            "computed": true
          },
          "subnetpool_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The ID of the subnetpool associated with the subnet.",
            "computed": true
          },
          "tags": {
            "type": "TypeSet",
            "optional": true,
            "description": "The list of subnet tags to filter.",
            "elem": {
              "type": "TypeString"
            }
          },
          "tenant_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The owner of the subnet.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available VKCS subnet."
      },
      "vkcs_publicdns_zone": {
        "schema": {
          "admin_email": {
            "type": "TypeString",
            "optional": true,
            "description": "The admin email of the zone SOA.",
            "computed": true
          },
          "expire": {
            "type": "TypeInt",
            "optional": true,
            "description": "The expire time of the zone SOA.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the DNS zone.",
            "computed": true
          },
          "primary_dns": {
            "type": "TypeString",
            "optional": true,
            "description": "The primary DNS of the zone SOA.",
            "computed": true
          },
          "refresh": {
            "type": "TypeInt",
            "optional": true,
            "description": "The refresh time of the zone SOA.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "retry": {
            "type": "TypeInt",
            "optional": true,
            "description": "The retry time of the zone SOA.",
            "computed": true
          },
          "serial": {
            "type": "TypeInt",
            "optional": true,
            "description": "The serial number of the zone SOA.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "The status of the zone.",
            "computed": true
          },
          "ttl": {
            "type": "TypeInt",
            "optional": true,
            "description": "The TTL (time to live) of the zone SOA.",
            "computed": true
          },
          "zone": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the zone.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of a VKCS public DNS zone.",
        "new_since": "v0.2.0"
      },
      "vkcs_region": {
        "schema": {
          "description": {
            "type": "TypeString",
            "description": "Description of the region.",
            "computed": true
          },
          "id": {
            "type": "TypeString",
            "optional": true,
            "description": "ID of the region to learn or use. Use empty value to learn current region on the provider."
          },
          "parent_region": {
            "type": "TypeString",
            "description": "Parent of the region.",
            "computed": true
          }
        },
        "description": "`vkcs_region` provides details about a specific VKCS region. As well as validating a given region name this resource can be used to discover the name of the region configured within the provider."
      },
      "vkcs_regions": {
        "schema": {
          "id": {
            "type": "TypeString",
            "description": "Random identifier of the data source.",
            "computed": true
          },
          "names": {
            "type": "TypeSet",
            "description": "Names of regions that meets the criteria.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "`vkcs_regions` provides information about VKCS regions. To get details of each region the data source can be combined with the `vkcs_region` data source."
      },
      "vkcs_sharedfilesystem_share": {
        "schema": {
          "availability_zone": {
            "type": "TypeString",
            "description": "The share availability zone.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description for the share.",
            "computed": true
          },
          "export_location_path": {
            "type": "TypeString",
            "optional": true,
            "description": "The export location path of the share.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the share.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "description": "The owner of the share.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client.",
            "computed": true
          },
          "share_network_id": {
            "type": "TypeString",
            "required": true,
            "description": "The UUID of the share's share network."
          },
          "share_proto": {
            "type": "TypeString",
            "description": "The share protocol.",
            "computed": true
          },
          "size": {
            "type": "TypeInt",
            "description": "The share size, in GBs.",
            "computed": true
          },
          "snapshot_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The UUID of the share's base snapshot.",
            "computed": true
          },
          "status": {
            "type": "TypeString",
            "optional": true,
            "description": "A share status filter. A valid value is `creating`, `error`, `available`, `deleting`, `error_deleting`, `manage_starting`, `manage_error`, `unmanage_starting`, `unmanage_error`, `unmanaged`, `extending`, `extending_error`, `shrinking`, `shrinking_error`, or `shrinking_possible_data_loss_error`.",
            "computed": true
          }
        },
        "description": "Use this data source to get the ID of an available Shared File System share."
      },
      "vkcs_sharedfilesystem_sharenetwork": {
        "schema": {
          "cidr": {
            "type": "TypeString",
            "description": "The share network CIDR.",
            "computed": true
          },
          "description": {
            "type": "TypeString",
            "optional": true,
            "description": "The human-readable description of the share network.",
            "computed": true
          },
          "name": {
            "type": "TypeString",
            "optional": true,
            "description": "The name of the share network.",
            "computed": true
          },
          "neutron_net_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The neutron network UUID of the share network.",
            "computed": true
          },
          "neutron_subnet_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The neutron subnet UUID of the share network.",
            "computed": true
          },
          "project_id": {
            "type": "TypeString",
            "description": "The owner of the share network.",
            "computed": true
          },
          "region": {
            "type": "TypeString",
            "optional": true,
            "description": "The region in which to obtain the Shared File System client. A Shared File System client is needed to read a share network. If omitted, the `region` argument of the provider is used.",
            "computed": true
          },
          "security_service_id": {
            "type": "TypeString",
            "optional": true,
            "description": "The security service IDs associated with the share network.",
            "elem": {
              "type": "TypeString"
            }
          },
          "security_service_ids": {
            "type": "TypeSet",
            "description": "The list of security service IDs associated with the share network.",
            "computed": true,
            "elem": {
              "type": "TypeString"
            }
          }
        },
        "description": "Use this data source to get the ID of an available Shared File System share network."
      }
    }
  }
}
