// Code generated by helpers/tfsdk2fw. Manual editing is required.

package {{ .PackageName }}

import (
	"context"

	{{if .ImportFrameworkAttr }}"github.com/hashicorp/terraform-plugin-framework/attr"{{- end}}
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/vk-cs/terraform-provider-vkcs/vkcs/internal/clients"
)

var (
    _ datasource.DataSource = &{{ .Name }}DataSource{}
    _ datasource.DataSourceWithConfigure = &{{ .Name }}DataSource{}
)

func New{{ .Name }}DataSource() datasource.DataSource {
	return &{{ .Name }}DataSource{}
}

type {{ .Name }}DataSource struct {
	config clients.Config
}

// The structure to read data source config into and to set state from.
// Consider replacing anonymous structs with named ones
// if any of those are present.
type {{ .Name }}DataSourceModel struct {
    {{ .Model }}
}

func (d *{{ .Name }}DataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "{{ .TFTypeName }}"
}

func (d *{{ .Name }}DataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
    resp.Schema = {{ .Schema }}
}

func (d *{{ .Name }}DataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	d.config = req.ProviderData.(clients.Config)
}

func (d *{{ .Name }}DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data {{ .Name }}DataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Consider adding "region" attribute if it is not present.
	region := data.Region.ValueString()
	if region == "" {
		region = d.config.GetRegion()
	}

	client, err := d.config.SomethingClient(region)
	if err != nil {
		resp.Diagnostics.AddError("Error creating VKCS {{ .ServiceName }} API client", err.Error())
		return
	}

	tflog.Debug(ctx, "Calling {{ .ServiceName }} API to read something")

	smth, err := smth.ReadSomething(client).Extract()
	if err != nil {
		resp.Diagnostics.AddError("Error calling VKCS {{ .ServiceName }} API", err.Error())
		return
	}

	tflog.Debug(ctx, "Called {{ .ServiceName }} API to read something")

	data.ID = types.StringValue("TODO")

    resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
