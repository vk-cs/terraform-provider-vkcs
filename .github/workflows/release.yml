# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  check-on-default-branch:
    runs-on: ubuntu-latest
    env: 
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Fetch default branch
        run: git fetch --depth 1 origin $DEFAULT_BRANCH
      - 
        name: Check release is on default branch
        run: |
          if [[ $(git rev-list -n 1 $GITHUB_REF) != $(git rev-list -n 1 origin/$DEFAULT_BRANCH) ]]
          then
            echo "Release tag should be added on $DEFAULT_BRANCH. Exiting..."
            exit 1
          fi

  check-prerelease-actions:
    needs: [check-on-default-branch]
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Run pre-release actions
        run: |
          chmod +x ./scripts/prerelease.sh
          ./scripts/prerelease.sh
      - 
        name: Get changes
        id: changes
        run: echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - 
        name: Fail on changes
        if: steps.changes.outputs.changed != 0
        run: |
          echo "You have to do pre-release actions before releasing. Exiting..."
          exit 1

  goreleaser:
    needs: [check-prerelease-actions]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          # These secrets will need to be configured for the repository:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - 
        name: Generate release notes
        run: CURRENT_TAG=$(git describe --abbrev=0 --match='v*.*.*' --tags); PREVIOUS_TAG=$(git describe --abbrev=0 --exclude="$CURRENT_TAG" --match='v*.*.*' --tags); sed -n -e "0,/#### $CURRENT_TAG/d" -e "/#### $PREVIOUS_TAG/q;p" CHANGELOG.md > release-notes.txt
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean --release-notes=release-notes.txt
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
